// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v0.0.2

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	http "net/http"
)

// This imports are custom by go-http.
import (
	restyv2 "github.com/go-resty/resty/v2"
	phttp "github.com/yusank/protoc-gen-go-http/http"
)

// This is a compile-time assertion to ensure that generated files are safe and compilable.
var _ context.Context

const _ = gin.Version

var _ http.Client
var _ phttp.CallOption

const _ = restyv2.Version

// 这里定义 handler interface
type RolesHTTPHandler interface {
	CreateRoles(context.Context, *CreateRolesRequest) (*CreateRolesReply, error)
	UpdateRoles(context.Context, *UpdateRolesRequest) (*UpdateRolesReply, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesReply, error)
	ChangeRoleStatus(context.Context, *ChangeRoleStatusRequest) (*ChangeRoleStatusReply, error)
	DataScope(context.Context, *DataScopeRequest) (*DataScopeReply, error)
	DeleteRoles(context.Context, *DeleteRolesRequest) (*DeleteRolesReply, error)
	GetRoles(context.Context, *GetRolesRequest) (*GetRolesReply, error)
}

// RegisterRolesHTTPHandler define http router handle by gin.
// 注册路由 handler
func RegisterRolesHTTPHandler(g *gin.RouterGroup, srv RolesHTTPHandler) {
	g.POST("/api/cas/v1/system/role", _Roles_CreateRoles0_HTTP_Handler(srv))
	g.PUT("/api/cas/v1/system/role", _Roles_UpdateRoles0_HTTP_Handler(srv))
	g.GET("/api/cas/v1/system/role/list", _Roles_ListRoles0_HTTP_Handler(srv))
	g.PUT("/api/cas/v1/system/role/changeStatus", _Roles_ChangeRoleStatus0_HTTP_Handler(srv))
	g.PUT("/api/cas/v1/system/role/dataScope", _Roles_DataScope0_HTTP_Handler(srv))
	g.DELETE("/api/cas/v1/system/role/{id}", _Roles_DeleteRoles0_HTTP_Handler(srv))
	g.GET("/api/cas/v1/system/role/{id}", _Roles_GetRoles0_HTTP_Handler(srv))
}

// 定义 handler
// 遍历之前解析到所有 rpc 方法信息

func _Roles_CreateRoles0_HTTP_Handler(srv RolesHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(CreateRolesRequest)
			out = new(CreateRolesReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.CreateRoles(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Roles_UpdateRoles0_HTTP_Handler(srv RolesHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(UpdateRolesRequest)
			out = new(UpdateRolesReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.UpdateRoles(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Roles_ListRoles0_HTTP_Handler(srv RolesHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(ListRolesRequest)
			out = new(ListRolesReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.ListRoles(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Roles_ChangeRoleStatus0_HTTP_Handler(srv RolesHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(ChangeRoleStatusRequest)
			out = new(ChangeRoleStatusReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.ChangeRoleStatus(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Roles_DataScope0_HTTP_Handler(srv RolesHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(DataScopeRequest)
			out = new(DataScopeReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.DataScope(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Roles_DeleteRoles0_HTTP_Handler(srv RolesHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(DeleteRolesRequest)
			out = new(DeleteRolesReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.DeleteRoles(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Roles_GetRoles0_HTTP_Handler(srv RolesHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(GetRolesRequest)
			out = new(GetRolesReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.GetRoles(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

// RolesHTTPClient defines call RolesServer client
type RolesHTTPClient interface {
	CreateRoles(ctx context.Context, req *CreateRolesRequest, opts ...phttp.CallOption) (*CreateRolesReply, error)
	UpdateRoles(ctx context.Context, req *UpdateRolesRequest, opts ...phttp.CallOption) (*UpdateRolesReply, error)
	ListRoles(ctx context.Context, req *ListRolesRequest, opts ...phttp.CallOption) (*ListRolesReply, error)
	ChangeRoleStatus(ctx context.Context, req *ChangeRoleStatusRequest, opts ...phttp.CallOption) (*ChangeRoleStatusReply, error)
	DataScope(ctx context.Context, req *DataScopeRequest, opts ...phttp.CallOption) (*DataScopeReply, error)
	DeleteRoles(ctx context.Context, req *DeleteRolesRequest, opts ...phttp.CallOption) (*DeleteRolesReply, error)
	GetRoles(ctx context.Context, req *GetRolesRequest, opts ...phttp.CallOption) (*GetRolesReply, error)
}

// RolesHTTPClientImpl implement RolesHTTPClient
type RolesHTTPClientImpl struct {
	cli        *restyv2.Client
	clientOpts []phttp.ClientOption
}

func NewRolesHTTPClient(cli *http.Client, opts ...phttp.ClientOption) (RolesHTTPClient, error) {
	c := &RolesHTTPClientImpl{
		clientOpts: opts,
	}

	hc := cli
	if hc == nil {
		hc = http.DefaultClient
	}

	c.cli = restyv2.NewWithClient(hc)
	for _, opt := range opts {
		if err := opt.Apply(c.cli); err != nil {
			return nil, err
		}
	}

	return c, nil
}

// CreateRoles is call [POST] /api/cas/v1/system/role api.
func (c *RolesHTTPClientImpl) CreateRoles(ctx context.Context, req *CreateRolesRequest, opts ...phttp.CallOption) (rsp *CreateRolesReply, err error) {
	rsp = new(CreateRolesReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("POST", "/api/cas/v1/system/role")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// UpdateRoles is call [PUT] /api/cas/v1/system/role api.
func (c *RolesHTTPClientImpl) UpdateRoles(ctx context.Context, req *UpdateRolesRequest, opts ...phttp.CallOption) (rsp *UpdateRolesReply, err error) {
	rsp = new(UpdateRolesReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("PUT", "/api/cas/v1/system/role")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// ListRoles is call [GET] /api/cas/v1/system/role/list api.
func (c *RolesHTTPClientImpl) ListRoles(ctx context.Context, req *ListRolesRequest, opts ...phttp.CallOption) (rsp *ListRolesReply, err error) {
	rsp = new(ListRolesReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("GET", "/api/cas/v1/system/role/list")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// ChangeRoleStatus is call [PUT] /api/cas/v1/system/role/changeStatus api.
func (c *RolesHTTPClientImpl) ChangeRoleStatus(ctx context.Context, req *ChangeRoleStatusRequest, opts ...phttp.CallOption) (rsp *ChangeRoleStatusReply, err error) {
	rsp = new(ChangeRoleStatusReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("PUT", "/api/cas/v1/system/role/changeStatus")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// DataScope is call [PUT] /api/cas/v1/system/role/dataScope api.
func (c *RolesHTTPClientImpl) DataScope(ctx context.Context, req *DataScopeRequest, opts ...phttp.CallOption) (rsp *DataScopeReply, err error) {
	rsp = new(DataScopeReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("PUT", "/api/cas/v1/system/role/dataScope")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// DeleteRoles is call [DELETE] /api/cas/v1/system/role/{id} api.
func (c *RolesHTTPClientImpl) DeleteRoles(ctx context.Context, req *DeleteRolesRequest, opts ...phttp.CallOption) (rsp *DeleteRolesReply, err error) {
	rsp = new(DeleteRolesReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("DELETE", "/api/cas/v1/system/role/{id}")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// GetRoles is call [GET] /api/cas/v1/system/role/{id} api.
func (c *RolesHTTPClientImpl) GetRoles(ctx context.Context, req *GetRolesRequest, opts ...phttp.CallOption) (rsp *GetRolesReply, err error) {
	rsp = new(GetRolesReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("GET", "/api/cas/v1/system/role/{id}")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}
