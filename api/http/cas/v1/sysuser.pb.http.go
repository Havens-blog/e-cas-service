// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v0.0.2

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	http "net/http"
)

// This imports are custom by go-http.
import (
	restyv2 "github.com/go-resty/resty/v2"
	phttp "github.com/yusank/protoc-gen-go-http/http"
)

// This is a compile-time assertion to ensure that generated files are safe and compilable.
var _ context.Context

const _ = gin.Version

var _ http.Client
var _ phttp.CallOption

const _ = restyv2.Version

// 这里定义 handler interface
type SysuserHTTPHandler interface {
	CreateSysuser(context.Context, *CreateSysuserRequest) (*CreateSysuserReply, error)
	UpdateSysuser(context.Context, *UpdateSysuserRequest) (*UpdateSysuserReply, error)
	DeleteSysuser(context.Context, *DeleteSysuserRequest) (*DeleteSysuserReply, error)
	GetSysuser(context.Context, *GetSysuserRequest) (*GetSysuserReply, error)
	ListSysuser(context.Context, *ListSysuserRequest) (*ListSysuserReply, error)
	GetCaptcha(context.Context, *GetCaptchaRequest) (*GetCaptchaReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	Auth(context.Context, *AuthRequest) (*AuthReply, error)
	ChangeStatus(context.Context, *ChangeStatusRequest) (*ChangeStatusReply, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordReply, error)
	GetPostInit(context.Context, *GetPostInitRequest) (*GetPostInitReply, error)
	GetUserRolePost(context.Context, *GetUserRolePostRequest) (*GetUserRolePostReply, error)
	GetUserGoogleSecret(context.Context, *GetUserGoogleSecretRequest) (*GetUserGoogleSecretReply, error)
}

// RegisterSysuserHTTPHandler define http router handle by gin.
// 注册路由 handler
func RegisterSysuserHTTPHandler(g *gin.RouterGroup, srv SysuserHTTPHandler) {
	g.POST("/api/cas/v1/system/user", _Sysuser_CreateSysuser0_HTTP_Handler(srv))
	g.PUT("/api/cas/v1/system/user", _Sysuser_UpdateSysuser0_HTTP_Handler(srv))
	g.DELETE("/api/cas/v1/system/user/{id}", _Sysuser_DeleteSysuser0_HTTP_Handler(srv))
	g.GET("/api/cas/v1/system/user/getById/{id}", _Sysuser_GetSysuser0_HTTP_Handler(srv))
	g.GET("/api/cas/v1/system/user/list", _Sysuser_ListSysuser0_HTTP_Handler(srv))
	g.GET("/api/cas/v1/system/user/getCaptcha", _Sysuser_GetCaptcha0_HTTP_Handler(srv))
	g.POST("/api/cas/v1/system/user/login", _Sysuser_Login1_HTTP_Handler(srv))
	g.POST("/api/cas/v1/system/user/logout", _Sysuser_Logout0_HTTP_Handler(srv))
	g.GET("/api/cas/v1/system/user/auth", _Sysuser_Auth0_HTTP_Handler(srv))
	g.PUT("/api/cas/v1/system/user/changeStatus", _Sysuser_ChangeStatus0_HTTP_Handler(srv))
	g.PUT("/api/cas/v1/system/user/pwd", _Sysuser_UpdatePassword0_HTTP_Handler(srv))
	g.GET("/api/cas/v1/system/user/getInit", _Sysuser_GetPostInit0_HTTP_Handler(srv))
	g.GET("/api/cas/v1/system/user/getRoPo", _Sysuser_GetUserRolePost0_HTTP_Handler(srv))
	g.GET("/api/cas/v1/system/user/secret", _Sysuser_GetUserGoogleSecret0_HTTP_Handler(srv))
}

// 定义 handler
// 遍历之前解析到所有 rpc 方法信息

func _Sysuser_CreateSysuser0_HTTP_Handler(srv SysuserHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(CreateSysuserRequest)
			out = new(CreateSysuserReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.CreateSysuser(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Sysuser_UpdateSysuser0_HTTP_Handler(srv SysuserHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(UpdateSysuserRequest)
			out = new(UpdateSysuserReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.UpdateSysuser(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Sysuser_DeleteSysuser0_HTTP_Handler(srv SysuserHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(DeleteSysuserRequest)
			out = new(DeleteSysuserReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.DeleteSysuser(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Sysuser_GetSysuser0_HTTP_Handler(srv SysuserHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(GetSysuserRequest)
			out = new(GetSysuserReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.GetSysuser(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Sysuser_ListSysuser0_HTTP_Handler(srv SysuserHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(ListSysuserRequest)
			out = new(ListSysuserReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.ListSysuser(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Sysuser_GetCaptcha0_HTTP_Handler(srv SysuserHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(GetCaptchaRequest)
			out = new(GetCaptchaReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.GetCaptcha(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Sysuser_Login1_HTTP_Handler(srv SysuserHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(LoginRequest)
			out = new(LoginReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.Login(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Sysuser_Logout0_HTTP_Handler(srv SysuserHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(LogoutRequest)
			out = new(LogoutReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.Logout(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Sysuser_Auth0_HTTP_Handler(srv SysuserHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(AuthRequest)
			out = new(AuthReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.Auth(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Sysuser_ChangeStatus0_HTTP_Handler(srv SysuserHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(ChangeStatusRequest)
			out = new(ChangeStatusReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.ChangeStatus(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Sysuser_UpdatePassword0_HTTP_Handler(srv SysuserHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(UpdatePasswordRequest)
			out = new(UpdatePasswordReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.UpdatePassword(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Sysuser_GetPostInit0_HTTP_Handler(srv SysuserHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(GetPostInitRequest)
			out = new(GetPostInitReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.GetPostInit(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Sysuser_GetUserRolePost0_HTTP_Handler(srv SysuserHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(GetUserRolePostRequest)
			out = new(GetUserRolePostReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.GetUserRolePost(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Sysuser_GetUserGoogleSecret0_HTTP_Handler(srv SysuserHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(GetUserGoogleSecretRequest)
			out = new(GetUserGoogleSecretReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.GetUserGoogleSecret(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

// SysuserHTTPClient defines call SysuserServer client
type SysuserHTTPClient interface {
	CreateSysuser(ctx context.Context, req *CreateSysuserRequest, opts ...phttp.CallOption) (*CreateSysuserReply, error)
	UpdateSysuser(ctx context.Context, req *UpdateSysuserRequest, opts ...phttp.CallOption) (*UpdateSysuserReply, error)
	DeleteSysuser(ctx context.Context, req *DeleteSysuserRequest, opts ...phttp.CallOption) (*DeleteSysuserReply, error)
	GetSysuser(ctx context.Context, req *GetSysuserRequest, opts ...phttp.CallOption) (*GetSysuserReply, error)
	ListSysuser(ctx context.Context, req *ListSysuserRequest, opts ...phttp.CallOption) (*ListSysuserReply, error)
	GetCaptcha(ctx context.Context, req *GetCaptchaRequest, opts ...phttp.CallOption) (*GetCaptchaReply, error)
	Login(ctx context.Context, req *LoginRequest, opts ...phttp.CallOption) (*LoginReply, error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...phttp.CallOption) (*LogoutReply, error)
	Auth(ctx context.Context, req *AuthRequest, opts ...phttp.CallOption) (*AuthReply, error)
	ChangeStatus(ctx context.Context, req *ChangeStatusRequest, opts ...phttp.CallOption) (*ChangeStatusReply, error)
	UpdatePassword(ctx context.Context, req *UpdatePasswordRequest, opts ...phttp.CallOption) (*UpdatePasswordReply, error)
	GetPostInit(ctx context.Context, req *GetPostInitRequest, opts ...phttp.CallOption) (*GetPostInitReply, error)
	GetUserRolePost(ctx context.Context, req *GetUserRolePostRequest, opts ...phttp.CallOption) (*GetUserRolePostReply, error)
	GetUserGoogleSecret(ctx context.Context, req *GetUserGoogleSecretRequest, opts ...phttp.CallOption) (*GetUserGoogleSecretReply, error)
}

// SysuserHTTPClientImpl implement SysuserHTTPClient
type SysuserHTTPClientImpl struct {
	cli        *restyv2.Client
	clientOpts []phttp.ClientOption
}

func NewSysuserHTTPClient(cli *http.Client, opts ...phttp.ClientOption) (SysuserHTTPClient, error) {
	c := &SysuserHTTPClientImpl{
		clientOpts: opts,
	}

	hc := cli
	if hc == nil {
		hc = http.DefaultClient
	}

	c.cli = restyv2.NewWithClient(hc)
	for _, opt := range opts {
		if err := opt.Apply(c.cli); err != nil {
			return nil, err
		}
	}

	return c, nil
}

// CreateSysuser is call [POST] /api/cas/v1/system/user api.
func (c *SysuserHTTPClientImpl) CreateSysuser(ctx context.Context, req *CreateSysuserRequest, opts ...phttp.CallOption) (rsp *CreateSysuserReply, err error) {
	rsp = new(CreateSysuserReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("POST", "/api/cas/v1/system/user")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// UpdateSysuser is call [PUT] /api/cas/v1/system/user api.
func (c *SysuserHTTPClientImpl) UpdateSysuser(ctx context.Context, req *UpdateSysuserRequest, opts ...phttp.CallOption) (rsp *UpdateSysuserReply, err error) {
	rsp = new(UpdateSysuserReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("PUT", "/api/cas/v1/system/user")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// DeleteSysuser is call [DELETE] /api/cas/v1/system/user/{id} api.
func (c *SysuserHTTPClientImpl) DeleteSysuser(ctx context.Context, req *DeleteSysuserRequest, opts ...phttp.CallOption) (rsp *DeleteSysuserReply, err error) {
	rsp = new(DeleteSysuserReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("DELETE", "/api/cas/v1/system/user/{id}")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// GetSysuser is call [GET] /api/cas/v1/system/user/getById/{id} api.
func (c *SysuserHTTPClientImpl) GetSysuser(ctx context.Context, req *GetSysuserRequest, opts ...phttp.CallOption) (rsp *GetSysuserReply, err error) {
	rsp = new(GetSysuserReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("GET", "/api/cas/v1/system/user/getById/{id}")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// ListSysuser is call [GET] /api/cas/v1/system/user/list api.
func (c *SysuserHTTPClientImpl) ListSysuser(ctx context.Context, req *ListSysuserRequest, opts ...phttp.CallOption) (rsp *ListSysuserReply, err error) {
	rsp = new(ListSysuserReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("GET", "/api/cas/v1/system/user/list")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// GetCaptcha is call [GET] /api/cas/v1/system/user/getCaptcha api.
func (c *SysuserHTTPClientImpl) GetCaptcha(ctx context.Context, req *GetCaptchaRequest, opts ...phttp.CallOption) (rsp *GetCaptchaReply, err error) {
	rsp = new(GetCaptchaReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("GET", "/api/cas/v1/system/user/getCaptcha")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// Login is call [POST] /api/cas/v1/system/user/login api.
func (c *SysuserHTTPClientImpl) Login(ctx context.Context, req *LoginRequest, opts ...phttp.CallOption) (rsp *LoginReply, err error) {
	rsp = new(LoginReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("POST", "/api/cas/v1/system/user/login")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// Logout is call [POST] /api/cas/v1/system/user/logout api.
func (c *SysuserHTTPClientImpl) Logout(ctx context.Context, req *LogoutRequest, opts ...phttp.CallOption) (rsp *LogoutReply, err error) {
	rsp = new(LogoutReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("POST", "/api/cas/v1/system/user/logout")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// Auth is call [GET] /api/cas/v1/system/user/auth api.
func (c *SysuserHTTPClientImpl) Auth(ctx context.Context, req *AuthRequest, opts ...phttp.CallOption) (rsp *AuthReply, err error) {
	rsp = new(AuthReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("GET", "/api/cas/v1/system/user/auth")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// ChangeStatus is call [PUT] /api/cas/v1/system/user/changeStatus api.
func (c *SysuserHTTPClientImpl) ChangeStatus(ctx context.Context, req *ChangeStatusRequest, opts ...phttp.CallOption) (rsp *ChangeStatusReply, err error) {
	rsp = new(ChangeStatusReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("PUT", "/api/cas/v1/system/user/changeStatus")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// UpdatePassword is call [PUT] /api/cas/v1/system/user/pwd api.
func (c *SysuserHTTPClientImpl) UpdatePassword(ctx context.Context, req *UpdatePasswordRequest, opts ...phttp.CallOption) (rsp *UpdatePasswordReply, err error) {
	rsp = new(UpdatePasswordReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("PUT", "/api/cas/v1/system/user/pwd")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// GetPostInit is call [GET] /api/cas/v1/system/user/getInit api.
func (c *SysuserHTTPClientImpl) GetPostInit(ctx context.Context, req *GetPostInitRequest, opts ...phttp.CallOption) (rsp *GetPostInitReply, err error) {
	rsp = new(GetPostInitReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("GET", "/api/cas/v1/system/user/getInit")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// GetUserRolePost is call [GET] /api/cas/v1/system/user/getRoPo api.
func (c *SysuserHTTPClientImpl) GetUserRolePost(ctx context.Context, req *GetUserRolePostRequest, opts ...phttp.CallOption) (rsp *GetUserRolePostReply, err error) {
	rsp = new(GetUserRolePostReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("GET", "/api/cas/v1/system/user/getRoPo")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// GetUserGoogleSecret is call [GET] /api/cas/v1/system/user/secret api.
func (c *SysuserHTTPClientImpl) GetUserGoogleSecret(ctx context.Context, req *GetUserGoogleSecretRequest, opts ...phttp.CallOption) (rsp *GetUserGoogleSecretReply, err error) {
	rsp = new(GetUserGoogleSecretReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("GET", "/api/cas/v1/system/user/secret")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}
