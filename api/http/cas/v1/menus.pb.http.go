// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v0.0.2

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	http "net/http"
)

// This imports are custom by go-http.
import (
	restyv2 "github.com/go-resty/resty/v2"
	phttp "github.com/yusank/protoc-gen-go-http/http"
)

// This is a compile-time assertion to ensure that generated files are safe and compilable.
var _ context.Context

const _ = gin.Version

var _ http.Client
var _ phttp.CallOption

const _ = restyv2.Version

// 这里定义 handler interface
type MenusHTTPHandler interface {
	CreateMenus(context.Context, *CreateMenusRequest) (*CreateMenusReply, error)
	ListMenus(context.Context, *ListMenusRequest) (*ListMenusReply, error)
	GetMenusTree(context.Context, *GetMenusTreeRequest) (*GetMenusTreeReply, error)
	UpdateMenus(context.Context, *UpdateMenusRequest) (*UpdateMenusReply, error)
	DeleteMenus(context.Context, *DeleteMenusRequest) (*DeleteMenusReply, error)
	GetMenus(context.Context, *GetMenusRequest) (*GetMenusReply, error)
	RoleMenuTreeSelect(context.Context, *RoleMenuTreeSelectRequest) (*RoleMenuTreeSelectReply, error)
}

// RegisterMenusHTTPHandler define http router handle by gin.
// 注册路由 handler
func RegisterMenusHTTPHandler(g *gin.RouterGroup, srv MenusHTTPHandler) {
	g.POST("/api/cas/v1/system/menu", _Menus_CreateMenus0_HTTP_Handler(srv))
	g.GET("/api/cas/v1/system/menu/list", _Menus_ListMenus0_HTTP_Handler(srv))
	g.GET("/api/cas/v1/system/menu/menuTreeSelect", _Menus_GetMenusTree0_HTTP_Handler(srv))
	g.PUT("/api/cas/v1/system/menu", _Menus_UpdateMenus0_HTTP_Handler(srv))
	g.DELETE("/api/cas/v1/system/menu/{id}", _Menus_DeleteMenus0_HTTP_Handler(srv))
	g.GET("/api/cas/v1/system/menu/{id}", _Menus_GetMenus0_HTTP_Handler(srv))
	g.GET("/api/cas/v1/system/menu/roleMenuTreeSelect/{roleId}", _Menus_RoleMenuTreeSelect0_HTTP_Handler(srv))
}

// 定义 handler
// 遍历之前解析到所有 rpc 方法信息

func _Menus_CreateMenus0_HTTP_Handler(srv MenusHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(CreateMenusRequest)
			out = new(CreateMenusReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.CreateMenus(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Menus_ListMenus0_HTTP_Handler(srv MenusHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(ListMenusRequest)
			out = new(ListMenusReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.ListMenus(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Menus_GetMenusTree0_HTTP_Handler(srv MenusHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(GetMenusTreeRequest)
			out = new(GetMenusTreeReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.GetMenusTree(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Menus_UpdateMenus0_HTTP_Handler(srv MenusHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(UpdateMenusRequest)
			out = new(UpdateMenusReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.UpdateMenus(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Menus_DeleteMenus0_HTTP_Handler(srv MenusHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(DeleteMenusRequest)
			out = new(DeleteMenusReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.DeleteMenus(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Menus_GetMenus0_HTTP_Handler(srv MenusHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(GetMenusRequest)
			out = new(GetMenusReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.GetMenus(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

func _Menus_RoleMenuTreeSelect0_HTTP_Handler(srv MenusHTTPHandler) func(c *gin.Context) {
	return func(c *gin.Context) {
		var (
			err error
			in  = new(RoleMenuTreeSelectRequest)
			out = new(RoleMenuTreeSelectReply)
			ctx = context.TODO()
		)

		if err = c.ShouldBind(in); err != nil {
			c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"err": err.Error()})
			return
		}

		// execute
		out, err = srv.RoleMenuTreeSelect(ctx, in)
		if err != nil {
			c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"err": err.Error()})
			return
		}

		c.JSON(http.StatusOK, out)
	}
}

// MenusHTTPClient defines call MenusServer client
type MenusHTTPClient interface {
	CreateMenus(ctx context.Context, req *CreateMenusRequest, opts ...phttp.CallOption) (*CreateMenusReply, error)
	ListMenus(ctx context.Context, req *ListMenusRequest, opts ...phttp.CallOption) (*ListMenusReply, error)
	GetMenusTree(ctx context.Context, req *GetMenusTreeRequest, opts ...phttp.CallOption) (*GetMenusTreeReply, error)
	UpdateMenus(ctx context.Context, req *UpdateMenusRequest, opts ...phttp.CallOption) (*UpdateMenusReply, error)
	DeleteMenus(ctx context.Context, req *DeleteMenusRequest, opts ...phttp.CallOption) (*DeleteMenusReply, error)
	GetMenus(ctx context.Context, req *GetMenusRequest, opts ...phttp.CallOption) (*GetMenusReply, error)
	RoleMenuTreeSelect(ctx context.Context, req *RoleMenuTreeSelectRequest, opts ...phttp.CallOption) (*RoleMenuTreeSelectReply, error)
}

// MenusHTTPClientImpl implement MenusHTTPClient
type MenusHTTPClientImpl struct {
	cli        *restyv2.Client
	clientOpts []phttp.ClientOption
}

func NewMenusHTTPClient(cli *http.Client, opts ...phttp.ClientOption) (MenusHTTPClient, error) {
	c := &MenusHTTPClientImpl{
		clientOpts: opts,
	}

	hc := cli
	if hc == nil {
		hc = http.DefaultClient
	}

	c.cli = restyv2.NewWithClient(hc)
	for _, opt := range opts {
		if err := opt.Apply(c.cli); err != nil {
			return nil, err
		}
	}

	return c, nil
}

// CreateMenus is call [POST] /api/cas/v1/system/menu api.
func (c *MenusHTTPClientImpl) CreateMenus(ctx context.Context, req *CreateMenusRequest, opts ...phttp.CallOption) (rsp *CreateMenusReply, err error) {
	rsp = new(CreateMenusReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("POST", "/api/cas/v1/system/menu")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// ListMenus is call [GET] /api/cas/v1/system/menu/list api.
func (c *MenusHTTPClientImpl) ListMenus(ctx context.Context, req *ListMenusRequest, opts ...phttp.CallOption) (rsp *ListMenusReply, err error) {
	rsp = new(ListMenusReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("GET", "/api/cas/v1/system/menu/list")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// GetMenusTree is call [GET] /api/cas/v1/system/menu/menuTreeSelect api.
func (c *MenusHTTPClientImpl) GetMenusTree(ctx context.Context, req *GetMenusTreeRequest, opts ...phttp.CallOption) (rsp *GetMenusTreeReply, err error) {
	rsp = new(GetMenusTreeReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("GET", "/api/cas/v1/system/menu/menuTreeSelect")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// UpdateMenus is call [PUT] /api/cas/v1/system/menu api.
func (c *MenusHTTPClientImpl) UpdateMenus(ctx context.Context, req *UpdateMenusRequest, opts ...phttp.CallOption) (rsp *UpdateMenusReply, err error) {
	rsp = new(UpdateMenusReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("PUT", "/api/cas/v1/system/menu")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// DeleteMenus is call [DELETE] /api/cas/v1/system/menu/{id} api.
func (c *MenusHTTPClientImpl) DeleteMenus(ctx context.Context, req *DeleteMenusRequest, opts ...phttp.CallOption) (rsp *DeleteMenusReply, err error) {
	rsp = new(DeleteMenusReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("DELETE", "/api/cas/v1/system/menu/{id}")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// GetMenus is call [GET] /api/cas/v1/system/menu/{id} api.
func (c *MenusHTTPClientImpl) GetMenus(ctx context.Context, req *GetMenusRequest, opts ...phttp.CallOption) (rsp *GetMenusReply, err error) {
	rsp = new(GetMenusReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("GET", "/api/cas/v1/system/menu/{id}")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}

// RoleMenuTreeSelect is call [GET] /api/cas/v1/system/menu/roleMenuTreeSelect/{roleId} api.
func (c *MenusHTTPClientImpl) RoleMenuTreeSelect(ctx context.Context, req *RoleMenuTreeSelectRequest, opts ...phttp.CallOption) (rsp *RoleMenuTreeSelectReply, err error) {
	rsp = new(RoleMenuTreeSelectReply)

	r := c.cli.R()
	for _, opt := range opts {
		if err = opt.Before(r); err != nil {
			return
		}
	}
	// set response data struct.
	r.SetResult(rsp)
	// do request
	restyResp, err := r.Execute("GET", "/api/cas/v1/system/menu/roleMenuTreeSelect/{roleId}")
	if err != nil {
		return nil, err
	}
	for _, opt := range opts {
		if err = opt.After(restyResp); err != nil {
			return
		}
	}

	return
}
