// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v4.23.2
// source: http/v1/http.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHttpServiceCaptcha = "/api.http.v1.HttpService/Captcha"
const OperationHttpServiceDebugPerf = "/api.http.v1.HttpService/DebugPerf"
const OperationHttpServiceLogin = "/api.http.v1.HttpService/Login"
const OperationHttpServiceSetting = "/api.http.v1.HttpService/Setting"

type HttpServiceHTTPServer interface {
	// Captcha获取验证码
	Captcha(context.Context, *CaptchaRequest) (*CaptchaResponse, error)
	// DebugPerf性能测试
	DebugPerf(context.Context, *DebugPerfRequest) (*DebugPerfResponse, error)
	// Login登录
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Setting设置
	Setting(context.Context, *SettingRequest) (*SettingResponse, error)
}

func RegisterHttpServiceHTTPServer(s *http.Server, srv HttpServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/debug/perf", _HttpService_DebugPerf0_HTTP_Handler(srv))
	r.POST("/v1/login", _HttpService_Login0_HTTP_Handler(srv))
	r.GET("/v1/captcha", _HttpService_Captcha0_HTTP_Handler(srv))
	r.GET("/v1/get/setting", _HttpService_Setting0_HTTP_Handler(srv))
}

func _HttpService_DebugPerf0_HTTP_Handler(srv HttpServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DebugPerfRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHttpServiceDebugPerf)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DebugPerf(ctx, req.(*DebugPerfRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DebugPerfResponse)
		return ctx.Result(200, reply)
	}
}

func _HttpService_Login0_HTTP_Handler(srv HttpServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHttpServiceLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _HttpService_Captcha0_HTTP_Handler(srv HttpServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CaptchaRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHttpServiceCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Captcha(ctx, req.(*CaptchaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaResponse)
		return ctx.Result(200, reply)
	}
}

func _HttpService_Setting0_HTTP_Handler(srv HttpServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SettingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHttpServiceSetting)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Setting(ctx, req.(*SettingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SettingResponse)
		return ctx.Result(200, reply)
	}
}

type HttpServiceHTTPClient interface {
	Captcha(ctx context.Context, req *CaptchaRequest, opts ...http.CallOption) (rsp *CaptchaResponse, err error)
	DebugPerf(ctx context.Context, req *DebugPerfRequest, opts ...http.CallOption) (rsp *DebugPerfResponse, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
	Setting(ctx context.Context, req *SettingRequest, opts ...http.CallOption) (rsp *SettingResponse, err error)
}

type HttpServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewHttpServiceHTTPClient(client *http.Client) HttpServiceHTTPClient {
	return &HttpServiceHTTPClientImpl{client}
}

func (c *HttpServiceHTTPClientImpl) Captcha(ctx context.Context, in *CaptchaRequest, opts ...http.CallOption) (*CaptchaResponse, error) {
	var out CaptchaResponse
	pattern := "/v1/captcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHttpServiceCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HttpServiceHTTPClientImpl) DebugPerf(ctx context.Context, in *DebugPerfRequest, opts ...http.CallOption) (*DebugPerfResponse, error) {
	var out DebugPerfResponse
	pattern := "/v1/debug/perf"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHttpServiceDebugPerf))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HttpServiceHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHttpServiceLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HttpServiceHTTPClientImpl) Setting(ctx context.Context, in *SettingRequest, opts ...http.CallOption) (*SettingResponse, error) {
	var out SettingResponse
	pattern := "/v1/get/setting"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHttpServiceSetting))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
