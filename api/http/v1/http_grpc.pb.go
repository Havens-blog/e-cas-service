// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: http/v1/http.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HttpService_DebugPerf_FullMethodName = "/api.http.v1.HttpService/DebugPerf"
	HttpService_Login_FullMethodName     = "/api.http.v1.HttpService/Login"
	HttpService_Captcha_FullMethodName   = "/api.http.v1.HttpService/Captcha"
	HttpService_Setting_FullMethodName   = "/api.http.v1.HttpService/Setting"
)

// HttpServiceClient is the client API for HttpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpServiceClient interface {
	// 性能测试
	DebugPerf(ctx context.Context, in *DebugPerfRequest, opts ...grpc.CallOption) (*DebugPerfResponse, error)
	// 登录
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 获取验证码
	Captcha(ctx context.Context, in *CaptchaRequest, opts ...grpc.CallOption) (*CaptchaResponse, error)
	// 设置
	Setting(ctx context.Context, in *SettingRequest, opts ...grpc.CallOption) (*SettingResponse, error)
}

type httpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpServiceClient(cc grpc.ClientConnInterface) HttpServiceClient {
	return &httpServiceClient{cc}
}

func (c *httpServiceClient) DebugPerf(ctx context.Context, in *DebugPerfRequest, opts ...grpc.CallOption) (*DebugPerfResponse, error) {
	out := new(DebugPerfResponse)
	err := c.cc.Invoke(ctx, HttpService_DebugPerf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, HttpService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpServiceClient) Captcha(ctx context.Context, in *CaptchaRequest, opts ...grpc.CallOption) (*CaptchaResponse, error) {
	out := new(CaptchaResponse)
	err := c.cc.Invoke(ctx, HttpService_Captcha_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpServiceClient) Setting(ctx context.Context, in *SettingRequest, opts ...grpc.CallOption) (*SettingResponse, error) {
	out := new(SettingResponse)
	err := c.cc.Invoke(ctx, HttpService_Setting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpServiceServer is the server API for HttpService service.
// All implementations must embed UnimplementedHttpServiceServer
// for forward compatibility
type HttpServiceServer interface {
	// 性能测试
	DebugPerf(context.Context, *DebugPerfRequest) (*DebugPerfResponse, error)
	// 登录
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// 获取验证码
	Captcha(context.Context, *CaptchaRequest) (*CaptchaResponse, error)
	// 设置
	Setting(context.Context, *SettingRequest) (*SettingResponse, error)
	mustEmbedUnimplementedHttpServiceServer()
}

// UnimplementedHttpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHttpServiceServer struct {
}

func (UnimplementedHttpServiceServer) DebugPerf(context.Context, *DebugPerfRequest) (*DebugPerfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugPerf not implemented")
}
func (UnimplementedHttpServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedHttpServiceServer) Captcha(context.Context, *CaptchaRequest) (*CaptchaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Captcha not implemented")
}
func (UnimplementedHttpServiceServer) Setting(context.Context, *SettingRequest) (*SettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setting not implemented")
}
func (UnimplementedHttpServiceServer) mustEmbedUnimplementedHttpServiceServer() {}

// UnsafeHttpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpServiceServer will
// result in compilation errors.
type UnsafeHttpServiceServer interface {
	mustEmbedUnimplementedHttpServiceServer()
}

func RegisterHttpServiceServer(s grpc.ServiceRegistrar, srv HttpServiceServer) {
	s.RegisterService(&HttpService_ServiceDesc, srv)
}

func _HttpService_DebugPerf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugPerfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServiceServer).DebugPerf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HttpService_DebugPerf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServiceServer).DebugPerf(ctx, req.(*DebugPerfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HttpService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpService_Captcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServiceServer).Captcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HttpService_Captcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServiceServer).Captcha(ctx, req.(*CaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpService_Setting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpServiceServer).Setting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HttpService_Setting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpServiceServer).Setting(ctx, req.(*SettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HttpService_ServiceDesc is the grpc.ServiceDesc for HttpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HttpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.http.v1.HttpService",
	HandlerType: (*HttpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DebugPerf",
			Handler:    _HttpService_DebugPerf_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _HttpService_Login_Handler,
		},
		{
			MethodName: "Captcha",
			Handler:    _HttpService_Captcha_Handler,
		},
		{
			MethodName: "Setting",
			Handler:    _HttpService_Setting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "http/v1/http.proto",
}
