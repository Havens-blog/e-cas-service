// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: http/v1/http.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DebugPerfRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DebugPerfRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebugPerfRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DebugPerfRequestMultiError, or nil if none found.
func (m *DebugPerfRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DebugPerfRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetText()) < 6 {
		err := DebugPerfRequestValidationError{
			field:  "Text",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DebugPerfRequestMultiError(errors)
	}

	return nil
}

// DebugPerfRequestMultiError is an error wrapping multiple validation errors
// returned by DebugPerfRequest.ValidateAll() if the designated constraints
// aren't met.
type DebugPerfRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebugPerfRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebugPerfRequestMultiError) AllErrors() []error { return m }

// DebugPerfRequestValidationError is the validation error returned by
// DebugPerfRequest.Validate if the designated constraints aren't met.
type DebugPerfRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugPerfRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugPerfRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugPerfRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugPerfRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugPerfRequestValidationError) ErrorName() string { return "DebugPerfRequestValidationError" }

// Error satisfies the builtin error interface
func (e DebugPerfRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugPerfRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugPerfRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugPerfRequestValidationError{}

// Validate checks the field values on DebugPerfResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DebugPerfResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebugPerfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DebugPerfResponseMultiError, or nil if none found.
func (m *DebugPerfResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DebugPerfResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for UID

	// no validation rules for UserName

	// no validation rules for Motto

	// no validation rules for Text

	// no validation rules for CreateTime

	// no validation rules for CreateUser

	if len(errors) > 0 {
		return DebugPerfResponseMultiError(errors)
	}

	return nil
}

// DebugPerfResponseMultiError is an error wrapping multiple validation errors
// returned by DebugPerfResponse.ValidateAll() if the designated constraints
// aren't met.
type DebugPerfResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebugPerfResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebugPerfResponseMultiError) AllErrors() []error { return m }

// DebugPerfResponseValidationError is the validation error returned by
// DebugPerfResponse.Validate if the designated constraints aren't met.
type DebugPerfResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugPerfResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugPerfResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugPerfResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugPerfResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugPerfResponseValidationError) ErrorName() string {
	return "DebugPerfResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DebugPerfResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugPerfResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugPerfResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugPerfResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 3 || l > 11 {
		err := LoginRequestValidationError{
			field:  "Username",
			reason: "value length must be between 3 and 11 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := LoginRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCaptcha()) != 6 {
		err := LoginRequestValidationError{
			field:  "Captcha",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	// no validation rules for CaptchaID

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for UID

	// no validation rules for UserName

	// no validation rules for NickName

	// no validation rules for Birth

	// no validation rules for Avatar

	// no validation rules for RoleID

	// no validation rules for RoleName

	// no validation rules for Phone

	// no validation rules for Wechat

	// no validation rules for Email

	// no validation rules for State

	// no validation rules for Motto

	// no validation rules for Token

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on CaptchaRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CaptchaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CaptchaRequestMultiError,
// or nil if none found.
func (m *CaptchaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CaptchaRequestMultiError(errors)
	}

	return nil
}

// CaptchaRequestMultiError is an error wrapping multiple validation errors
// returned by CaptchaRequest.ValidateAll() if the designated constraints
// aren't met.
type CaptchaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaRequestMultiError) AllErrors() []error { return m }

// CaptchaRequestValidationError is the validation error returned by
// CaptchaRequest.Validate if the designated constraints aren't met.
type CaptchaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaRequestValidationError) ErrorName() string { return "CaptchaRequestValidationError" }

// Error satisfies the builtin error interface
func (e CaptchaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaRequestValidationError{}

// Validate checks the field values on CaptchaResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CaptchaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CaptchaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CaptchaResponseMultiError, or nil if none found.
func (m *CaptchaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CaptchaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CaptchaID

	// no validation rules for PicPath

	// no validation rules for CaptchaLength

	if len(errors) > 0 {
		return CaptchaResponseMultiError(errors)
	}

	return nil
}

// CaptchaResponseMultiError is an error wrapping multiple validation errors
// returned by CaptchaResponse.ValidateAll() if the designated constraints
// aren't met.
type CaptchaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CaptchaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CaptchaResponseMultiError) AllErrors() []error { return m }

// CaptchaResponseValidationError is the validation error returned by
// CaptchaResponse.Validate if the designated constraints aren't met.
type CaptchaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaResponseValidationError) ErrorName() string { return "CaptchaResponseValidationError" }

// Error satisfies the builtin error interface
func (e CaptchaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptchaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaResponseValidationError{}

// Validate checks the field values on MenuRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenuRequestMultiError, or
// nil if none found.
func (m *MenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MenuRequestMultiError(errors)
	}

	return nil
}

// MenuRequestMultiError is an error wrapping multiple validation errors
// returned by MenuRequest.ValidateAll() if the designated constraints aren't met.
type MenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuRequestMultiError) AllErrors() []error { return m }

// MenuRequestValidationError is the validation error returned by
// MenuRequest.Validate if the designated constraints aren't met.
type MenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuRequestValidationError) ErrorName() string { return "MenuRequestValidationError" }

// Error satisfies the builtin error interface
func (e MenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuRequestValidationError{}

// Validate checks the field values on MenuResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenuResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenuResponseMultiError, or
// nil if none found.
func (m *MenuResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Name

	// no validation rules for Component

	// no validation rules for Redirect

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MenuResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MenuResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MenuResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MenuResponseValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MenuResponseValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenuResponseValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MenuResponseMultiError(errors)
	}

	return nil
}

// MenuResponseMultiError is an error wrapping multiple validation errors
// returned by MenuResponse.ValidateAll() if the designated constraints aren't met.
type MenuResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuResponseMultiError) AllErrors() []error { return m }

// MenuResponseValidationError is the validation error returned by
// MenuResponse.Validate if the designated constraints aren't met.
type MenuResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuResponseValidationError) ErrorName() string { return "MenuResponseValidationError" }

// Error satisfies the builtin error interface
func (e MenuResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuResponseValidationError{}

// Validate checks the field values on GetCasbinRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCasbinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCasbinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCasbinRequestMultiError, or nil if none found.
func (m *GetCasbinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCasbinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleIDs

	// no validation rules for Path

	// no validation rules for Method

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetCasbinRequestMultiError(errors)
	}

	return nil
}

// GetCasbinRequestMultiError is an error wrapping multiple validation errors
// returned by GetCasbinRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCasbinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCasbinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCasbinRequestMultiError) AllErrors() []error { return m }

// GetCasbinRequestValidationError is the validation error returned by
// GetCasbinRequest.Validate if the designated constraints aren't met.
type GetCasbinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCasbinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCasbinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCasbinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCasbinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCasbinRequestValidationError) ErrorName() string { return "GetCasbinRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCasbinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCasbinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCasbinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCasbinRequestValidationError{}

// Validate checks the field values on GetCasbinResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCasbinResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCasbinResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCasbinResponseMultiError, or nil if none found.
func (m *GetCasbinResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCasbinResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for RoleIDs

	// no validation rules for Path

	// no validation rules for Method

	// no validation rules for Desc

	if len(errors) > 0 {
		return GetCasbinResponseMultiError(errors)
	}

	return nil
}

// GetCasbinResponseMultiError is an error wrapping multiple validation errors
// returned by GetCasbinResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCasbinResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCasbinResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCasbinResponseMultiError) AllErrors() []error { return m }

// GetCasbinResponseValidationError is the validation error returned by
// GetCasbinResponse.Validate if the designated constraints aren't met.
type GetCasbinResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCasbinResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCasbinResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCasbinResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCasbinResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCasbinResponseValidationError) ErrorName() string {
	return "GetCasbinResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCasbinResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCasbinResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCasbinResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCasbinResponseValidationError{}

// Validate checks the field values on AddTokenBlackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddTokenBlackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTokenBlackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddTokenBlackRequestMultiError, or nil if none found.
func (m *AddTokenBlackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTokenBlackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return AddTokenBlackRequestMultiError(errors)
	}

	return nil
}

// AddTokenBlackRequestMultiError is an error wrapping multiple validation
// errors returned by AddTokenBlackRequest.ValidateAll() if the designated
// constraints aren't met.
type AddTokenBlackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTokenBlackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTokenBlackRequestMultiError) AllErrors() []error { return m }

// AddTokenBlackRequestValidationError is the validation error returned by
// AddTokenBlackRequest.Validate if the designated constraints aren't met.
type AddTokenBlackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTokenBlackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTokenBlackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTokenBlackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTokenBlackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTokenBlackRequestValidationError) ErrorName() string {
	return "AddTokenBlackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddTokenBlackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTokenBlackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTokenBlackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTokenBlackRequestValidationError{}

// Validate checks the field values on IsTokenBlackkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsTokenBlackkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsTokenBlackkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsTokenBlackkRequestMultiError, or nil if none found.
func (m *IsTokenBlackkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsTokenBlackkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return IsTokenBlackkRequestMultiError(errors)
	}

	return nil
}

// IsTokenBlackkRequestMultiError is an error wrapping multiple validation
// errors returned by IsTokenBlackkRequest.ValidateAll() if the designated
// constraints aren't met.
type IsTokenBlackkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsTokenBlackkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsTokenBlackkRequestMultiError) AllErrors() []error { return m }

// IsTokenBlackkRequestValidationError is the validation error returned by
// IsTokenBlackkRequest.Validate if the designated constraints aren't met.
type IsTokenBlackkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsTokenBlackkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsTokenBlackkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsTokenBlackkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsTokenBlackkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsTokenBlackkRequestValidationError) ErrorName() string {
	return "IsTokenBlackkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsTokenBlackkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsTokenBlackkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsTokenBlackkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsTokenBlackkRequestValidationError{}

// Validate checks the field values on SettingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SettingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SettingRequestMultiError,
// or nil if none found.
func (m *SettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Lang

	// no validation rules for SideModeColor

	// no validation rules for Collapse

	// no validation rules for Breadcrumb

	// no validation rules for DefaultRouter

	// no validation rules for ActiveTextColor

	// no validation rules for ActiveBackgroundColor

	// no validation rules for UID

	if len(errors) > 0 {
		return SettingRequestMultiError(errors)
	}

	return nil
}

// SettingRequestMultiError is an error wrapping multiple validation errors
// returned by SettingRequest.ValidateAll() if the designated constraints
// aren't met.
type SettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingRequestMultiError) AllErrors() []error { return m }

// SettingRequestValidationError is the validation error returned by
// SettingRequest.Validate if the designated constraints aren't met.
type SettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingRequestValidationError) ErrorName() string { return "SettingRequestValidationError" }

// Error satisfies the builtin error interface
func (e SettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingRequestValidationError{}

// Validate checks the field values on SettingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SettingResponseMultiError, or nil if none found.
func (m *SettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Lang

	// no validation rules for SideModeColor

	// no validation rules for Collapse

	// no validation rules for Breadcrumb

	// no validation rules for DefaultRouter

	// no validation rules for ActiveTextColor

	// no validation rules for ActiveBackgroundColor

	// no validation rules for UID

	if len(errors) > 0 {
		return SettingResponseMultiError(errors)
	}

	return nil
}

// SettingResponseMultiError is an error wrapping multiple validation errors
// returned by SettingResponse.ValidateAll() if the designated constraints
// aren't met.
type SettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingResponseMultiError) AllErrors() []error { return m }

// SettingResponseValidationError is the validation error returned by
// SettingResponse.Validate if the designated constraints aren't met.
type SettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingResponseValidationError) ErrorName() string { return "SettingResponseValidationError" }

// Error satisfies the builtin error interface
func (e SettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingResponseValidationError{}

// Validate checks the field values on AddRoleMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddRoleMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRoleMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRoleMenuRequestMultiError, or nil if none found.
func (m *AddRoleMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRoleMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Component

	// no validation rules for Hidden

	// no validation rules for Icon

	// no validation rules for KeepAlive

	// no validation rules for Name

	// no validation rules for ParentID

	// no validation rules for Path

	// no validation rules for RoleIDs

	// no validation rules for Sort

	// no validation rules for Title

	// no validation rules for Redirect

	if len(errors) > 0 {
		return AddRoleMenuRequestMultiError(errors)
	}

	return nil
}

// AddRoleMenuRequestMultiError is an error wrapping multiple validation errors
// returned by AddRoleMenuRequest.ValidateAll() if the designated constraints
// aren't met.
type AddRoleMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRoleMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRoleMenuRequestMultiError) AllErrors() []error { return m }

// AddRoleMenuRequestValidationError is the validation error returned by
// AddRoleMenuRequest.Validate if the designated constraints aren't met.
type AddRoleMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRoleMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRoleMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRoleMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRoleMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRoleMenuRequestValidationError) ErrorName() string {
	return "AddRoleMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddRoleMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRoleMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRoleMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRoleMenuRequestValidationError{}

// Validate checks the field values on UpdateRoleMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleMenuRequestMultiError, or nil if none found.
func (m *UpdateRoleMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Component

	// no validation rules for Hidden

	// no validation rules for Icon

	// no validation rules for KeepAlive

	// no validation rules for Name

	// no validation rules for ParentID

	// no validation rules for Path

	// no validation rules for RoleIDs

	// no validation rules for Sort

	// no validation rules for Title

	// no validation rules for ID

	// no validation rules for Redirect

	if len(errors) > 0 {
		return UpdateRoleMenuRequestMultiError(errors)
	}

	return nil
}

// UpdateRoleMenuRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRoleMenuRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRoleMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleMenuRequestMultiError) AllErrors() []error { return m }

// UpdateRoleMenuRequestValidationError is the validation error returned by
// UpdateRoleMenuRequest.Validate if the designated constraints aren't met.
type UpdateRoleMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleMenuRequestValidationError) ErrorName() string {
	return "UpdateRoleMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleMenuRequestValidationError{}

// Validate checks the field values on DeleteRoleMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleMenuRequestMultiError, or nil if none found.
func (m *DeleteRoleMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if len(errors) > 0 {
		return DeleteRoleMenuRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleMenuRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRoleMenuRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoleMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleMenuRequestMultiError) AllErrors() []error { return m }

// DeleteRoleMenuRequestValidationError is the validation error returned by
// DeleteRoleMenuRequest.Validate if the designated constraints aren't met.
type DeleteRoleMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleMenuRequestValidationError) ErrorName() string {
	return "DeleteRoleMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleMenuRequestValidationError{}

// Validate checks the field values on AddCasbinRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddCasbinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCasbinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCasbinRequestMultiError, or nil if none found.
func (m *AddCasbinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCasbinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleIDs

	// no validation rules for Path

	// no validation rules for Method

	// no validation rules for Desc

	if len(errors) > 0 {
		return AddCasbinRequestMultiError(errors)
	}

	return nil
}

// AddCasbinRequestMultiError is an error wrapping multiple validation errors
// returned by AddCasbinRequest.ValidateAll() if the designated constraints
// aren't met.
type AddCasbinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCasbinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCasbinRequestMultiError) AllErrors() []error { return m }

// AddCasbinRequestValidationError is the validation error returned by
// AddCasbinRequest.Validate if the designated constraints aren't met.
type AddCasbinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCasbinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCasbinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCasbinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCasbinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCasbinRequestValidationError) ErrorName() string { return "AddCasbinRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddCasbinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCasbinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCasbinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCasbinRequestValidationError{}

// Validate checks the field values on UpdateCasbinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCasbinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCasbinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCasbinRequestMultiError, or nil if none found.
func (m *UpdateCasbinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCasbinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for RoleIDs

	// no validation rules for Path

	// no validation rules for Method

	// no validation rules for Desc

	if len(errors) > 0 {
		return UpdateCasbinRequestMultiError(errors)
	}

	return nil
}

// UpdateCasbinRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCasbinRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCasbinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCasbinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCasbinRequestMultiError) AllErrors() []error { return m }

// UpdateCasbinRequestValidationError is the validation error returned by
// UpdateCasbinRequest.Validate if the designated constraints aren't met.
type UpdateCasbinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCasbinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCasbinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCasbinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCasbinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCasbinRequestValidationError) ErrorName() string {
	return "UpdateCasbinRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCasbinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCasbinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCasbinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCasbinRequestValidationError{}

// Validate checks the field values on DeleteCasbinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCasbinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCasbinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCasbinRequestMultiError, or nil if none found.
func (m *DeleteCasbinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCasbinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if len(errors) > 0 {
		return DeleteCasbinRequestMultiError(errors)
	}

	return nil
}

// DeleteCasbinRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCasbinRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCasbinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCasbinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCasbinRequestMultiError) AllErrors() []error { return m }

// DeleteCasbinRequestValidationError is the validation error returned by
// DeleteCasbinRequest.Validate if the designated constraints aren't met.
type DeleteCasbinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCasbinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCasbinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCasbinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCasbinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCasbinRequestValidationError) ErrorName() string {
	return "DeleteCasbinRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCasbinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCasbinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCasbinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCasbinRequestValidationError{}

// Validate checks the field values on GetUserInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInfoResponseMultiError, or nil if none found.
func (m *GetUserInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for UID

	// no validation rules for UserName

	// no validation rules for NickName

	// no validation rules for Birth

	// no validation rules for Avatar

	// no validation rules for RoleID

	// no validation rules for RoleName

	// no validation rules for Phone

	// no validation rules for Wechat

	// no validation rules for Email

	// no validation rules for State

	// no validation rules for Motto

	if len(errors) > 0 {
		return GetUserInfoResponseMultiError(errors)
	}

	return nil
}

// GetUserInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoResponseMultiError) AllErrors() []error { return m }

// GetUserInfoResponseValidationError is the validation error returned by
// GetUserInfoResponse.Validate if the designated constraints aren't met.
type GetUserInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoResponseValidationError) ErrorName() string {
	return "GetUserInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoResponseValidationError{}

// Validate checks the field values on UpdateUserInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserInfoRequestMultiError, or nil if none found.
func (m *UpdateUserInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UID

	// no validation rules for NickName

	// no validation rules for Birth

	// no validation rules for Phone

	// no validation rules for Wechat

	// no validation rules for Email

	// no validation rules for Motto

	if len(errors) > 0 {
		return UpdateUserInfoRequestMultiError(errors)
	}

	return nil
}

// UpdateUserInfoRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserInfoRequestMultiError) AllErrors() []error { return m }

// UpdateUserInfoRequestValidationError is the validation error returned by
// UpdateUserInfoRequest.Validate if the designated constraints aren't met.
type UpdateUserInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserInfoRequestValidationError) ErrorName() string {
	return "UpdateUserInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserInfoRequestValidationError{}

// Validate checks the field values on UpdatePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePasswordRequestMultiError, or nil if none found.
func (m *UpdatePasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UID

	// no validation rules for OldPassword

	// no validation rules for NewPassword

	if len(errors) > 0 {
		return UpdatePasswordRequestMultiError(errors)
	}

	return nil
}

// UpdatePasswordRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePasswordRequestMultiError) AllErrors() []error { return m }

// UpdatePasswordRequestValidationError is the validation error returned by
// UpdatePasswordRequest.Validate if the designated constraints aren't met.
type UpdatePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordRequestValidationError) ErrorName() string {
	return "UpdatePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordRequestValidationError{}

// Validate checks the field values on MenuResponse_Meta with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MenuResponse_Meta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuResponse_Meta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MenuResponse_MetaMultiError, or nil if none found.
func (m *MenuResponse_Meta) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuResponse_Meta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for ParentID

	// no validation rules for RoleIDs

	// no validation rules for Title

	// no validation rules for Icon

	// no validation rules for Hidden

	// no validation rules for KeepAlive

	// no validation rules for Sort

	if len(errors) > 0 {
		return MenuResponse_MetaMultiError(errors)
	}

	return nil
}

// MenuResponse_MetaMultiError is an error wrapping multiple validation errors
// returned by MenuResponse_Meta.ValidateAll() if the designated constraints
// aren't met.
type MenuResponse_MetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuResponse_MetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuResponse_MetaMultiError) AllErrors() []error { return m }

// MenuResponse_MetaValidationError is the validation error returned by
// MenuResponse_Meta.Validate if the designated constraints aren't met.
type MenuResponse_MetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuResponse_MetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuResponse_MetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuResponse_MetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuResponse_MetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuResponse_MetaValidationError) ErrorName() string {
	return "MenuResponse_MetaValidationError"
}

// Error satisfies the builtin error interface
func (e MenuResponse_MetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuResponse_Meta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuResponse_MetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuResponse_MetaValidationError{}
