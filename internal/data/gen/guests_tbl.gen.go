// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Havens-blog/e-cas-service/internal/data/model"
)

func newGuestsTbl(db *gorm.DB, opts ...gen.DOOption) guestsTbl {
	_guestsTbl := guestsTbl{}

	_guestsTbl.guestsTblDo.UseDB(db, opts...)
	_guestsTbl.guestsTblDo.UseModel(&model.GuestsTbl{})

	tableName := _guestsTbl.guestsTblDo.TableName()
	_guestsTbl.ALL = field.NewAsterisk(tableName)
	_guestsTbl.CreatedAt = field.NewTime(tableName, "created_at")
	_guestsTbl.UpdatedAt = field.NewTime(tableName, "updated_at")
	_guestsTbl.UpdateVersion = field.NewInt32(tableName, "update_version")
	_guestsTbl.DeletedAt = field.NewField(tableName, "deleted_at")
	_guestsTbl.Deleted = field.NewBool(tableName, "deleted")
	_guestsTbl.ID = field.NewString(tableName, "id")
	_guestsTbl.Description = field.NewString(tableName, "description")
	_guestsTbl.IsEmulated = field.NewBool(tableName, "is_emulated")
	_guestsTbl.Name = field.NewString(tableName, "name")
	_guestsTbl.Status = field.NewString(tableName, "status")
	_guestsTbl.Progress = field.NewFloat32(tableName, "progress")
	_guestsTbl.DomainID = field.NewString(tableName, "domain_id")
	_guestsTbl.TenantID = field.NewString(tableName, "tenant_id")
	_guestsTbl.PendingDeletedAt = field.NewTime(tableName, "pending_deleted_at")
	_guestsTbl.PendingDeleted = field.NewBool(tableName, "pending_deleted")
	_guestsTbl.ProjectSrc = field.NewString(tableName, "project_src")
	_guestsTbl.IsSystem = field.NewBool(tableName, "is_system")
	_guestsTbl.Freezed = field.NewBool(tableName, "freezed")
	_guestsTbl.ExternalID = field.NewString(tableName, "external_id")
	_guestsTbl.ImportedAt = field.NewTime(tableName, "imported_at")
	_guestsTbl.Source = field.NewString(tableName, "source")
	_guestsTbl.BillingType = field.NewString(tableName, "billing_type")
	_guestsTbl.ExpiredAt = field.NewTime(tableName, "expired_at")
	_guestsTbl.BillingCycle = field.NewString(tableName, "billing_cycle")
	_guestsTbl.AutoRenew = field.NewBool(tableName, "auto_renew")
	_guestsTbl.DisableDelete = field.NewBool(tableName, "disable_delete")
	_guestsTbl.OsArch = field.NewString(tableName, "os_arch")
	_guestsTbl.RecordChecksum = field.NewString(tableName, "record_checksum")
	_guestsTbl.Hostname = field.NewString(tableName, "hostname")
	_guestsTbl.HostID = field.NewString(tableName, "host_id")
	_guestsTbl.EncryptKeyID = field.NewString(tableName, "encrypt_key_id")
	_guestsTbl.CPUSockets = field.NewInt32(tableName, "cpu_sockets")
	_guestsTbl.VcpuCount = field.NewInt32(tableName, "vcpu_count")
	_guestsTbl.VmemSize = field.NewInt32(tableName, "vmem_size")
	_guestsTbl.BootOrder = field.NewString(tableName, "boot_order")
	_guestsTbl.ShutdownBehavior = field.NewString(tableName, "shutdown_behavior")
	_guestsTbl.ShutdownMode = field.NewString(tableName, "shutdown_mode")
	_guestsTbl.KeypairID = field.NewString(tableName, "keypair_id")
	_guestsTbl.BackupHostID = field.NewString(tableName, "backup_host_id")
	_guestsTbl.BackupGuestStatus = field.NewString(tableName, "backup_guest_status")
	_guestsTbl.ProgressMbps = field.NewFloat64(tableName, "progress_mbps")
	_guestsTbl.Vga = field.NewString(tableName, "vga")
	_guestsTbl.Vdi = field.NewString(tableName, "vdi")
	_guestsTbl.Machine = field.NewString(tableName, "machine")
	_guestsTbl.Bios = field.NewString(tableName, "bios")
	_guestsTbl.OsType = field.NewString(tableName, "os_type")
	_guestsTbl.FlavorID = field.NewString(tableName, "flavor_id")
	_guestsTbl.SecgrpID = field.NewString(tableName, "secgrp_id")
	_guestsTbl.AdminSecgrpID = field.NewString(tableName, "admin_secgrp_id")
	_guestsTbl.SrcIPCheck = field.NewBool(tableName, "src_ip_check")
	_guestsTbl.SrcMacCheck = field.NewBool(tableName, "src_mac_check")
	_guestsTbl.Hypervisor = field.NewString(tableName, "hypervisor")
	_guestsTbl.InstanceType = field.NewString(tableName, "instance_type")
	_guestsTbl.SshableLastState = field.NewBool(tableName, "sshable_last_state")
	_guestsTbl.IsDaemon = field.NewBool(tableName, "is_daemon")
	_guestsTbl.InternetMaxBandwidthOut = field.NewInt32(tableName, "internet_max_bandwidth_out")
	_guestsTbl.Throughput = field.NewInt32(tableName, "throughput")
	_guestsTbl.QgaStatus = field.NewString(tableName, "qga_status")
	_guestsTbl.PowerStates = field.NewString(tableName, "power_states")
	_guestsTbl.RescueMode = field.NewBool(tableName, "rescue_mode")

	_guestsTbl.fillFieldMap()

	return _guestsTbl
}

type guestsTbl struct {
	guestsTblDo guestsTblDo

	ALL                     field.Asterisk
	CreatedAt               field.Time
	UpdatedAt               field.Time
	UpdateVersion           field.Int32
	DeletedAt               field.Field
	Deleted                 field.Bool
	ID                      field.String
	Description             field.String
	IsEmulated              field.Bool
	Name                    field.String
	Status                  field.String
	Progress                field.Float32
	DomainID                field.String
	TenantID                field.String
	PendingDeletedAt        field.Time
	PendingDeleted          field.Bool
	ProjectSrc              field.String
	IsSystem                field.Bool
	Freezed                 field.Bool
	ExternalID              field.String
	ImportedAt              field.Time
	Source                  field.String
	BillingType             field.String
	ExpiredAt               field.Time
	BillingCycle            field.String
	AutoRenew               field.Bool
	DisableDelete           field.Bool
	OsArch                  field.String
	RecordChecksum          field.String
	Hostname                field.String
	HostID                  field.String
	EncryptKeyID            field.String
	CPUSockets              field.Int32
	VcpuCount               field.Int32
	VmemSize                field.Int32
	BootOrder               field.String
	ShutdownBehavior        field.String
	ShutdownMode            field.String
	KeypairID               field.String
	BackupHostID            field.String
	BackupGuestStatus       field.String
	ProgressMbps            field.Float64
	Vga                     field.String
	Vdi                     field.String
	Machine                 field.String
	Bios                    field.String
	OsType                  field.String
	FlavorID                field.String
	SecgrpID                field.String
	AdminSecgrpID           field.String
	SrcIPCheck              field.Bool
	SrcMacCheck             field.Bool
	Hypervisor              field.String
	InstanceType            field.String
	SshableLastState        field.Bool
	IsDaemon                field.Bool
	InternetMaxBandwidthOut field.Int32
	Throughput              field.Int32
	QgaStatus               field.String
	PowerStates             field.String
	RescueMode              field.Bool

	fieldMap map[string]field.Expr
}

func (g guestsTbl) Table(newTableName string) *guestsTbl {
	g.guestsTblDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g guestsTbl) As(alias string) *guestsTbl {
	g.guestsTblDo.DO = *(g.guestsTblDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *guestsTbl) updateTableName(table string) *guestsTbl {
	g.ALL = field.NewAsterisk(table)
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.UpdateVersion = field.NewInt32(table, "update_version")
	g.DeletedAt = field.NewField(table, "deleted_at")
	g.Deleted = field.NewBool(table, "deleted")
	g.ID = field.NewString(table, "id")
	g.Description = field.NewString(table, "description")
	g.IsEmulated = field.NewBool(table, "is_emulated")
	g.Name = field.NewString(table, "name")
	g.Status = field.NewString(table, "status")
	g.Progress = field.NewFloat32(table, "progress")
	g.DomainID = field.NewString(table, "domain_id")
	g.TenantID = field.NewString(table, "tenant_id")
	g.PendingDeletedAt = field.NewTime(table, "pending_deleted_at")
	g.PendingDeleted = field.NewBool(table, "pending_deleted")
	g.ProjectSrc = field.NewString(table, "project_src")
	g.IsSystem = field.NewBool(table, "is_system")
	g.Freezed = field.NewBool(table, "freezed")
	g.ExternalID = field.NewString(table, "external_id")
	g.ImportedAt = field.NewTime(table, "imported_at")
	g.Source = field.NewString(table, "source")
	g.BillingType = field.NewString(table, "billing_type")
	g.ExpiredAt = field.NewTime(table, "expired_at")
	g.BillingCycle = field.NewString(table, "billing_cycle")
	g.AutoRenew = field.NewBool(table, "auto_renew")
	g.DisableDelete = field.NewBool(table, "disable_delete")
	g.OsArch = field.NewString(table, "os_arch")
	g.RecordChecksum = field.NewString(table, "record_checksum")
	g.Hostname = field.NewString(table, "hostname")
	g.HostID = field.NewString(table, "host_id")
	g.EncryptKeyID = field.NewString(table, "encrypt_key_id")
	g.CPUSockets = field.NewInt32(table, "cpu_sockets")
	g.VcpuCount = field.NewInt32(table, "vcpu_count")
	g.VmemSize = field.NewInt32(table, "vmem_size")
	g.BootOrder = field.NewString(table, "boot_order")
	g.ShutdownBehavior = field.NewString(table, "shutdown_behavior")
	g.ShutdownMode = field.NewString(table, "shutdown_mode")
	g.KeypairID = field.NewString(table, "keypair_id")
	g.BackupHostID = field.NewString(table, "backup_host_id")
	g.BackupGuestStatus = field.NewString(table, "backup_guest_status")
	g.ProgressMbps = field.NewFloat64(table, "progress_mbps")
	g.Vga = field.NewString(table, "vga")
	g.Vdi = field.NewString(table, "vdi")
	g.Machine = field.NewString(table, "machine")
	g.Bios = field.NewString(table, "bios")
	g.OsType = field.NewString(table, "os_type")
	g.FlavorID = field.NewString(table, "flavor_id")
	g.SecgrpID = field.NewString(table, "secgrp_id")
	g.AdminSecgrpID = field.NewString(table, "admin_secgrp_id")
	g.SrcIPCheck = field.NewBool(table, "src_ip_check")
	g.SrcMacCheck = field.NewBool(table, "src_mac_check")
	g.Hypervisor = field.NewString(table, "hypervisor")
	g.InstanceType = field.NewString(table, "instance_type")
	g.SshableLastState = field.NewBool(table, "sshable_last_state")
	g.IsDaemon = field.NewBool(table, "is_daemon")
	g.InternetMaxBandwidthOut = field.NewInt32(table, "internet_max_bandwidth_out")
	g.Throughput = field.NewInt32(table, "throughput")
	g.QgaStatus = field.NewString(table, "qga_status")
	g.PowerStates = field.NewString(table, "power_states")
	g.RescueMode = field.NewBool(table, "rescue_mode")

	g.fillFieldMap()

	return g
}

func (g *guestsTbl) WithContext(ctx context.Context) *guestsTblDo {
	return g.guestsTblDo.WithContext(ctx)
}

func (g guestsTbl) TableName() string { return g.guestsTblDo.TableName() }

func (g guestsTbl) Alias() string { return g.guestsTblDo.Alias() }

func (g *guestsTbl) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *guestsTbl) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 60)
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["update_version"] = g.UpdateVersion
	g.fieldMap["deleted_at"] = g.DeletedAt
	g.fieldMap["deleted"] = g.Deleted
	g.fieldMap["id"] = g.ID
	g.fieldMap["description"] = g.Description
	g.fieldMap["is_emulated"] = g.IsEmulated
	g.fieldMap["name"] = g.Name
	g.fieldMap["status"] = g.Status
	g.fieldMap["progress"] = g.Progress
	g.fieldMap["domain_id"] = g.DomainID
	g.fieldMap["tenant_id"] = g.TenantID
	g.fieldMap["pending_deleted_at"] = g.PendingDeletedAt
	g.fieldMap["pending_deleted"] = g.PendingDeleted
	g.fieldMap["project_src"] = g.ProjectSrc
	g.fieldMap["is_system"] = g.IsSystem
	g.fieldMap["freezed"] = g.Freezed
	g.fieldMap["external_id"] = g.ExternalID
	g.fieldMap["imported_at"] = g.ImportedAt
	g.fieldMap["source"] = g.Source
	g.fieldMap["billing_type"] = g.BillingType
	g.fieldMap["expired_at"] = g.ExpiredAt
	g.fieldMap["billing_cycle"] = g.BillingCycle
	g.fieldMap["auto_renew"] = g.AutoRenew
	g.fieldMap["disable_delete"] = g.DisableDelete
	g.fieldMap["os_arch"] = g.OsArch
	g.fieldMap["record_checksum"] = g.RecordChecksum
	g.fieldMap["hostname"] = g.Hostname
	g.fieldMap["host_id"] = g.HostID
	g.fieldMap["encrypt_key_id"] = g.EncryptKeyID
	g.fieldMap["cpu_sockets"] = g.CPUSockets
	g.fieldMap["vcpu_count"] = g.VcpuCount
	g.fieldMap["vmem_size"] = g.VmemSize
	g.fieldMap["boot_order"] = g.BootOrder
	g.fieldMap["shutdown_behavior"] = g.ShutdownBehavior
	g.fieldMap["shutdown_mode"] = g.ShutdownMode
	g.fieldMap["keypair_id"] = g.KeypairID
	g.fieldMap["backup_host_id"] = g.BackupHostID
	g.fieldMap["backup_guest_status"] = g.BackupGuestStatus
	g.fieldMap["progress_mbps"] = g.ProgressMbps
	g.fieldMap["vga"] = g.Vga
	g.fieldMap["vdi"] = g.Vdi
	g.fieldMap["machine"] = g.Machine
	g.fieldMap["bios"] = g.Bios
	g.fieldMap["os_type"] = g.OsType
	g.fieldMap["flavor_id"] = g.FlavorID
	g.fieldMap["secgrp_id"] = g.SecgrpID
	g.fieldMap["admin_secgrp_id"] = g.AdminSecgrpID
	g.fieldMap["src_ip_check"] = g.SrcIPCheck
	g.fieldMap["src_mac_check"] = g.SrcMacCheck
	g.fieldMap["hypervisor"] = g.Hypervisor
	g.fieldMap["instance_type"] = g.InstanceType
	g.fieldMap["sshable_last_state"] = g.SshableLastState
	g.fieldMap["is_daemon"] = g.IsDaemon
	g.fieldMap["internet_max_bandwidth_out"] = g.InternetMaxBandwidthOut
	g.fieldMap["throughput"] = g.Throughput
	g.fieldMap["qga_status"] = g.QgaStatus
	g.fieldMap["power_states"] = g.PowerStates
	g.fieldMap["rescue_mode"] = g.RescueMode
}

func (g guestsTbl) clone(db *gorm.DB) guestsTbl {
	g.guestsTblDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g guestsTbl) replaceDB(db *gorm.DB) guestsTbl {
	g.guestsTblDo.ReplaceDB(db)
	return g
}

type guestsTblDo struct{ gen.DO }

func (g guestsTblDo) Debug() *guestsTblDo {
	return g.withDO(g.DO.Debug())
}

func (g guestsTblDo) WithContext(ctx context.Context) *guestsTblDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g guestsTblDo) ReadDB() *guestsTblDo {
	return g.Clauses(dbresolver.Read)
}

func (g guestsTblDo) WriteDB() *guestsTblDo {
	return g.Clauses(dbresolver.Write)
}

func (g guestsTblDo) Session(config *gorm.Session) *guestsTblDo {
	return g.withDO(g.DO.Session(config))
}

func (g guestsTblDo) Clauses(conds ...clause.Expression) *guestsTblDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g guestsTblDo) Returning(value interface{}, columns ...string) *guestsTblDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g guestsTblDo) Not(conds ...gen.Condition) *guestsTblDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g guestsTblDo) Or(conds ...gen.Condition) *guestsTblDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g guestsTblDo) Select(conds ...field.Expr) *guestsTblDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g guestsTblDo) Where(conds ...gen.Condition) *guestsTblDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g guestsTblDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *guestsTblDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g guestsTblDo) Order(conds ...field.Expr) *guestsTblDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g guestsTblDo) Distinct(cols ...field.Expr) *guestsTblDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g guestsTblDo) Omit(cols ...field.Expr) *guestsTblDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g guestsTblDo) Join(table schema.Tabler, on ...field.Expr) *guestsTblDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g guestsTblDo) LeftJoin(table schema.Tabler, on ...field.Expr) *guestsTblDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g guestsTblDo) RightJoin(table schema.Tabler, on ...field.Expr) *guestsTblDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g guestsTblDo) Group(cols ...field.Expr) *guestsTblDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g guestsTblDo) Having(conds ...gen.Condition) *guestsTblDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g guestsTblDo) Limit(limit int) *guestsTblDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g guestsTblDo) Offset(offset int) *guestsTblDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g guestsTblDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *guestsTblDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g guestsTblDo) Unscoped() *guestsTblDo {
	return g.withDO(g.DO.Unscoped())
}

func (g guestsTblDo) Create(values ...*model.GuestsTbl) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g guestsTblDo) CreateInBatches(values []*model.GuestsTbl, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g guestsTblDo) Save(values ...*model.GuestsTbl) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g guestsTblDo) First() (*model.GuestsTbl, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuestsTbl), nil
	}
}

func (g guestsTblDo) Take() (*model.GuestsTbl, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuestsTbl), nil
	}
}

func (g guestsTblDo) Last() (*model.GuestsTbl, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuestsTbl), nil
	}
}

func (g guestsTblDo) Find() ([]*model.GuestsTbl, error) {
	result, err := g.DO.Find()
	return result.([]*model.GuestsTbl), err
}

func (g guestsTblDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GuestsTbl, err error) {
	buf := make([]*model.GuestsTbl, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g guestsTblDo) FindInBatches(result *[]*model.GuestsTbl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g guestsTblDo) Attrs(attrs ...field.AssignExpr) *guestsTblDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g guestsTblDo) Assign(attrs ...field.AssignExpr) *guestsTblDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g guestsTblDo) Joins(fields ...field.RelationField) *guestsTblDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g guestsTblDo) Preload(fields ...field.RelationField) *guestsTblDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g guestsTblDo) FirstOrInit() (*model.GuestsTbl, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuestsTbl), nil
	}
}

func (g guestsTblDo) FirstOrCreate() (*model.GuestsTbl, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GuestsTbl), nil
	}
}

func (g guestsTblDo) FindByPage(offset int, limit int) (result []*model.GuestsTbl, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g guestsTblDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g guestsTblDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g guestsTblDo) Delete(models ...*model.GuestsTbl) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *guestsTblDo) withDO(do gen.Dao) *guestsTblDo {
	g.DO = *do.(*gen.DO)
	return g
}
