// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Havens-blog/e-cas-service/internal/data/model"
)

func newDebugPerf(db *gorm.DB, opts ...gen.DOOption) debugPerf {
	_debugPerf := debugPerf{}

	_debugPerf.debugPerfDo.UseDB(db, opts...)
	_debugPerf.debugPerfDo.UseModel(&model.DebugPerf{})

	tableName := _debugPerf.debugPerfDo.TableName()
	_debugPerf.ALL = field.NewAsterisk(tableName)
	_debugPerf.ID = field.NewInt64(tableName, "id")
	_debugPerf.UID = field.NewString(tableName, "uid")
	_debugPerf.Username = field.NewString(tableName, "username")
	_debugPerf.Motto = field.NewString(tableName, "motto")
	_debugPerf.Text = field.NewString(tableName, "text")
	_debugPerf.CreateAt = field.NewTime(tableName, "create_at")
	_debugPerf.UpdateAt = field.NewTime(tableName, "update_at")
	_debugPerf.DeletedAt = field.NewField(tableName, "deleted_at")
	_debugPerf.CreateUser = field.NewString(tableName, "create_user")
	_debugPerf.UpdateUser = field.NewString(tableName, "update_user")

	_debugPerf.fillFieldMap()

	return _debugPerf
}

type debugPerf struct {
	debugPerfDo debugPerfDo

	ALL        field.Asterisk
	ID         field.Int64
	UID        field.String // uid
	Username   field.String // 用户名
	Motto      field.String // 座右铭
	Text       field.String // 内容
	CreateAt   field.Time   // 记录创建时间
	UpdateAt   field.Time   // 记录修改时间
	DeletedAt  field.Field
	CreateUser field.String // 创建人
	UpdateUser field.String // 修改人

	fieldMap map[string]field.Expr
}

func (d debugPerf) Table(newTableName string) *debugPerf {
	d.debugPerfDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d debugPerf) As(alias string) *debugPerf {
	d.debugPerfDo.DO = *(d.debugPerfDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *debugPerf) updateTableName(table string) *debugPerf {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.UID = field.NewString(table, "uid")
	d.Username = field.NewString(table, "username")
	d.Motto = field.NewString(table, "motto")
	d.Text = field.NewString(table, "text")
	d.CreateAt = field.NewTime(table, "create_at")
	d.UpdateAt = field.NewTime(table, "update_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.CreateUser = field.NewString(table, "create_user")
	d.UpdateUser = field.NewString(table, "update_user")

	d.fillFieldMap()

	return d
}

func (d *debugPerf) WithContext(ctx context.Context) *debugPerfDo {
	return d.debugPerfDo.WithContext(ctx)
}

func (d debugPerf) TableName() string { return d.debugPerfDo.TableName() }

func (d debugPerf) Alias() string { return d.debugPerfDo.Alias() }

func (d *debugPerf) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *debugPerf) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 10)
	d.fieldMap["id"] = d.ID
	d.fieldMap["uid"] = d.UID
	d.fieldMap["username"] = d.Username
	d.fieldMap["motto"] = d.Motto
	d.fieldMap["text"] = d.Text
	d.fieldMap["create_at"] = d.CreateAt
	d.fieldMap["update_at"] = d.UpdateAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["create_user"] = d.CreateUser
	d.fieldMap["update_user"] = d.UpdateUser
}

func (d debugPerf) clone(db *gorm.DB) debugPerf {
	d.debugPerfDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d debugPerf) replaceDB(db *gorm.DB) debugPerf {
	d.debugPerfDo.ReplaceDB(db)
	return d
}

type debugPerfDo struct{ gen.DO }

func (d debugPerfDo) Debug() *debugPerfDo {
	return d.withDO(d.DO.Debug())
}

func (d debugPerfDo) WithContext(ctx context.Context) *debugPerfDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d debugPerfDo) ReadDB() *debugPerfDo {
	return d.Clauses(dbresolver.Read)
}

func (d debugPerfDo) WriteDB() *debugPerfDo {
	return d.Clauses(dbresolver.Write)
}

func (d debugPerfDo) Session(config *gorm.Session) *debugPerfDo {
	return d.withDO(d.DO.Session(config))
}

func (d debugPerfDo) Clauses(conds ...clause.Expression) *debugPerfDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d debugPerfDo) Returning(value interface{}, columns ...string) *debugPerfDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d debugPerfDo) Not(conds ...gen.Condition) *debugPerfDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d debugPerfDo) Or(conds ...gen.Condition) *debugPerfDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d debugPerfDo) Select(conds ...field.Expr) *debugPerfDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d debugPerfDo) Where(conds ...gen.Condition) *debugPerfDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d debugPerfDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *debugPerfDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d debugPerfDo) Order(conds ...field.Expr) *debugPerfDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d debugPerfDo) Distinct(cols ...field.Expr) *debugPerfDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d debugPerfDo) Omit(cols ...field.Expr) *debugPerfDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d debugPerfDo) Join(table schema.Tabler, on ...field.Expr) *debugPerfDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d debugPerfDo) LeftJoin(table schema.Tabler, on ...field.Expr) *debugPerfDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d debugPerfDo) RightJoin(table schema.Tabler, on ...field.Expr) *debugPerfDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d debugPerfDo) Group(cols ...field.Expr) *debugPerfDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d debugPerfDo) Having(conds ...gen.Condition) *debugPerfDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d debugPerfDo) Limit(limit int) *debugPerfDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d debugPerfDo) Offset(offset int) *debugPerfDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d debugPerfDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *debugPerfDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d debugPerfDo) Unscoped() *debugPerfDo {
	return d.withDO(d.DO.Unscoped())
}

func (d debugPerfDo) Create(values ...*model.DebugPerf) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d debugPerfDo) CreateInBatches(values []*model.DebugPerf, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d debugPerfDo) Save(values ...*model.DebugPerf) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d debugPerfDo) First() (*model.DebugPerf, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DebugPerf), nil
	}
}

func (d debugPerfDo) Take() (*model.DebugPerf, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DebugPerf), nil
	}
}

func (d debugPerfDo) Last() (*model.DebugPerf, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DebugPerf), nil
	}
}

func (d debugPerfDo) Find() ([]*model.DebugPerf, error) {
	result, err := d.DO.Find()
	return result.([]*model.DebugPerf), err
}

func (d debugPerfDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DebugPerf, err error) {
	buf := make([]*model.DebugPerf, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d debugPerfDo) FindInBatches(result *[]*model.DebugPerf, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d debugPerfDo) Attrs(attrs ...field.AssignExpr) *debugPerfDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d debugPerfDo) Assign(attrs ...field.AssignExpr) *debugPerfDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d debugPerfDo) Joins(fields ...field.RelationField) *debugPerfDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d debugPerfDo) Preload(fields ...field.RelationField) *debugPerfDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d debugPerfDo) FirstOrInit() (*model.DebugPerf, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DebugPerf), nil
	}
}

func (d debugPerfDo) FirstOrCreate() (*model.DebugPerf, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DebugPerf), nil
	}
}

func (d debugPerfDo) FindByPage(offset int, limit int) (result []*model.DebugPerf, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d debugPerfDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d debugPerfDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d debugPerfDo) Delete(models ...*model.DebugPerf) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *debugPerfDo) withDO(do gen.Dao) *debugPerfDo {
	d.DO = *do.(*gen.DO)
	return d
}
