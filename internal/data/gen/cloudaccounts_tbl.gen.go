// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Havens-blog/e-cas-service/internal/data/model"
)

func newCloudaccountsTbl(db *gorm.DB, opts ...gen.DOOption) cloudaccountsTbl {
	_cloudaccountsTbl := cloudaccountsTbl{}

	_cloudaccountsTbl.cloudaccountsTblDo.UseDB(db, opts...)
	_cloudaccountsTbl.cloudaccountsTblDo.UseModel(&model.CloudaccountsTbl{})

	tableName := _cloudaccountsTbl.cloudaccountsTblDo.TableName()
	_cloudaccountsTbl.ALL = field.NewAsterisk(tableName)
	_cloudaccountsTbl.CreatedAt = field.NewTime(tableName, "created_at")
	_cloudaccountsTbl.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cloudaccountsTbl.UpdateVersion = field.NewInt32(tableName, "update_version")
	_cloudaccountsTbl.DeletedAt = field.NewField(tableName, "deleted_at")
	_cloudaccountsTbl.Deleted = field.NewBool(tableName, "deleted")
	_cloudaccountsTbl.ID = field.NewString(tableName, "id")
	_cloudaccountsTbl.Description = field.NewString(tableName, "description")
	_cloudaccountsTbl.IsEmulated = field.NewBool(tableName, "is_emulated")
	_cloudaccountsTbl.Name = field.NewString(tableName, "name")
	_cloudaccountsTbl.DomainID = field.NewString(tableName, "domain_id")
	_cloudaccountsTbl.DomainSrc = field.NewString(tableName, "domain_src")
	_cloudaccountsTbl.IsPublic = field.NewBool(tableName, "is_public")
	_cloudaccountsTbl.PublicScope = field.NewString(tableName, "public_scope")
	_cloudaccountsTbl.PublicSrc = field.NewString(tableName, "public_src")
	_cloudaccountsTbl.Status = field.NewString(tableName, "status")
	_cloudaccountsTbl.Progress = field.NewFloat32(tableName, "progress")
	_cloudaccountsTbl.Enabled = field.NewBool(tableName, "enabled")
	_cloudaccountsTbl.SyncStatus = field.NewString(tableName, "sync_status")
	_cloudaccountsTbl.LastSync = field.NewTime(tableName, "last_sync")
	_cloudaccountsTbl.LastSyncEndAt = field.NewTime(tableName, "last_sync_end_at")
	_cloudaccountsTbl.TenantID = field.NewString(tableName, "tenant_id")
	_cloudaccountsTbl.AccessURL = field.NewString(tableName, "access_url")
	_cloudaccountsTbl.Account = field.NewString(tableName, "account")
	_cloudaccountsTbl.Secret = field.NewString(tableName, "secret")
	_cloudaccountsTbl.AccountID = field.NewString(tableName, "account_id")
	_cloudaccountsTbl.IsPublicCloud = field.NewBool(tableName, "is_public_cloud")
	_cloudaccountsTbl.IsOnPremise = field.NewBool(tableName, "is_on_premise")
	_cloudaccountsTbl.Provider = field.NewString(tableName, "provider")
	_cloudaccountsTbl.Balance = field.NewFloat64(tableName, "balance")
	_cloudaccountsTbl.Currency = field.NewString(tableName, "currency")
	_cloudaccountsTbl.ProbeAt = field.NewTime(tableName, "probe_at")
	_cloudaccountsTbl.HealthStatus = field.NewString(tableName, "health_status")
	_cloudaccountsTbl.ErrorCount = field.NewInt32(tableName, "error_count")
	_cloudaccountsTbl.AutoCreateProject = field.NewBool(tableName, "auto_create_project")
	_cloudaccountsTbl.AutoCreateProjectForProvider = field.NewBool(tableName, "auto_create_project_for_provider")
	_cloudaccountsTbl.Version = field.NewString(tableName, "version")
	_cloudaccountsTbl.Sysinfo = field.NewString(tableName, "sysinfo")
	_cloudaccountsTbl.Brand = field.NewString(tableName, "brand")
	_cloudaccountsTbl.Options = field.NewString(tableName, "options")
	_cloudaccountsTbl.ShareMode = field.NewString(tableName, "share_mode")
	_cloudaccountsTbl.ProxySettingID = field.NewString(tableName, "proxy_setting_id")
	_cloudaccountsTbl.IamLoginURL = field.NewString(tableName, "iam_login_url")
	_cloudaccountsTbl.SamlAuth = field.NewBool(tableName, "saml_auth")
	_cloudaccountsTbl.ProjectMappingID = field.NewString(tableName, "project_mapping_id")
	_cloudaccountsTbl.EnableProjectSync = field.NewBool(tableName, "enable_project_sync")
	_cloudaccountsTbl.EnableResourceSync = field.NewBool(tableName, "enable_resource_sync")
	_cloudaccountsTbl.ReadOnly = field.NewBool(tableName, "read_only")
	_cloudaccountsTbl.SubAccounts = field.NewString(tableName, "sub_accounts")
	_cloudaccountsTbl.LakeOfPermissions = field.NewString(tableName, "lake_of_permissions")
	_cloudaccountsTbl.SkipSyncResources = field.NewString(tableName, "skip_sync_resources")

	_cloudaccountsTbl.fillFieldMap()

	return _cloudaccountsTbl
}

type cloudaccountsTbl struct {
	cloudaccountsTblDo cloudaccountsTblDo

	ALL                          field.Asterisk
	CreatedAt                    field.Time
	UpdatedAt                    field.Time
	UpdateVersion                field.Int32
	DeletedAt                    field.Field
	Deleted                      field.Bool
	ID                           field.String
	Description                  field.String
	IsEmulated                   field.Bool
	Name                         field.String
	DomainID                     field.String
	DomainSrc                    field.String
	IsPublic                     field.Bool
	PublicScope                  field.String
	PublicSrc                    field.String
	Status                       field.String
	Progress                     field.Float32
	Enabled                      field.Bool
	SyncStatus                   field.String
	LastSync                     field.Time
	LastSyncEndAt                field.Time
	TenantID                     field.String
	AccessURL                    field.String
	Account                      field.String
	Secret                       field.String
	AccountID                    field.String
	IsPublicCloud                field.Bool
	IsOnPremise                  field.Bool
	Provider                     field.String
	Balance                      field.Float64
	Currency                     field.String
	ProbeAt                      field.Time
	HealthStatus                 field.String
	ErrorCount                   field.Int32
	AutoCreateProject            field.Bool
	AutoCreateProjectForProvider field.Bool
	Version                      field.String
	Sysinfo                      field.String
	Brand                        field.String
	Options                      field.String
	ShareMode                    field.String
	ProxySettingID               field.String
	IamLoginURL                  field.String
	SamlAuth                     field.Bool
	ProjectMappingID             field.String
	EnableProjectSync            field.Bool
	EnableResourceSync           field.Bool
	ReadOnly                     field.Bool
	SubAccounts                  field.String
	LakeOfPermissions            field.String
	SkipSyncResources            field.String

	fieldMap map[string]field.Expr
}

func (c cloudaccountsTbl) Table(newTableName string) *cloudaccountsTbl {
	c.cloudaccountsTblDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cloudaccountsTbl) As(alias string) *cloudaccountsTbl {
	c.cloudaccountsTblDo.DO = *(c.cloudaccountsTblDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cloudaccountsTbl) updateTableName(table string) *cloudaccountsTbl {
	c.ALL = field.NewAsterisk(table)
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.UpdateVersion = field.NewInt32(table, "update_version")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Deleted = field.NewBool(table, "deleted")
	c.ID = field.NewString(table, "id")
	c.Description = field.NewString(table, "description")
	c.IsEmulated = field.NewBool(table, "is_emulated")
	c.Name = field.NewString(table, "name")
	c.DomainID = field.NewString(table, "domain_id")
	c.DomainSrc = field.NewString(table, "domain_src")
	c.IsPublic = field.NewBool(table, "is_public")
	c.PublicScope = field.NewString(table, "public_scope")
	c.PublicSrc = field.NewString(table, "public_src")
	c.Status = field.NewString(table, "status")
	c.Progress = field.NewFloat32(table, "progress")
	c.Enabled = field.NewBool(table, "enabled")
	c.SyncStatus = field.NewString(table, "sync_status")
	c.LastSync = field.NewTime(table, "last_sync")
	c.LastSyncEndAt = field.NewTime(table, "last_sync_end_at")
	c.TenantID = field.NewString(table, "tenant_id")
	c.AccessURL = field.NewString(table, "access_url")
	c.Account = field.NewString(table, "account")
	c.Secret = field.NewString(table, "secret")
	c.AccountID = field.NewString(table, "account_id")
	c.IsPublicCloud = field.NewBool(table, "is_public_cloud")
	c.IsOnPremise = field.NewBool(table, "is_on_premise")
	c.Provider = field.NewString(table, "provider")
	c.Balance = field.NewFloat64(table, "balance")
	c.Currency = field.NewString(table, "currency")
	c.ProbeAt = field.NewTime(table, "probe_at")
	c.HealthStatus = field.NewString(table, "health_status")
	c.ErrorCount = field.NewInt32(table, "error_count")
	c.AutoCreateProject = field.NewBool(table, "auto_create_project")
	c.AutoCreateProjectForProvider = field.NewBool(table, "auto_create_project_for_provider")
	c.Version = field.NewString(table, "version")
	c.Sysinfo = field.NewString(table, "sysinfo")
	c.Brand = field.NewString(table, "brand")
	c.Options = field.NewString(table, "options")
	c.ShareMode = field.NewString(table, "share_mode")
	c.ProxySettingID = field.NewString(table, "proxy_setting_id")
	c.IamLoginURL = field.NewString(table, "iam_login_url")
	c.SamlAuth = field.NewBool(table, "saml_auth")
	c.ProjectMappingID = field.NewString(table, "project_mapping_id")
	c.EnableProjectSync = field.NewBool(table, "enable_project_sync")
	c.EnableResourceSync = field.NewBool(table, "enable_resource_sync")
	c.ReadOnly = field.NewBool(table, "read_only")
	c.SubAccounts = field.NewString(table, "sub_accounts")
	c.LakeOfPermissions = field.NewString(table, "lake_of_permissions")
	c.SkipSyncResources = field.NewString(table, "skip_sync_resources")

	c.fillFieldMap()

	return c
}

func (c *cloudaccountsTbl) WithContext(ctx context.Context) *cloudaccountsTblDo {
	return c.cloudaccountsTblDo.WithContext(ctx)
}

func (c cloudaccountsTbl) TableName() string { return c.cloudaccountsTblDo.TableName() }

func (c cloudaccountsTbl) Alias() string { return c.cloudaccountsTblDo.Alias() }

func (c *cloudaccountsTbl) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cloudaccountsTbl) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 50)
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["update_version"] = c.UpdateVersion
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["deleted"] = c.Deleted
	c.fieldMap["id"] = c.ID
	c.fieldMap["description"] = c.Description
	c.fieldMap["is_emulated"] = c.IsEmulated
	c.fieldMap["name"] = c.Name
	c.fieldMap["domain_id"] = c.DomainID
	c.fieldMap["domain_src"] = c.DomainSrc
	c.fieldMap["is_public"] = c.IsPublic
	c.fieldMap["public_scope"] = c.PublicScope
	c.fieldMap["public_src"] = c.PublicSrc
	c.fieldMap["status"] = c.Status
	c.fieldMap["progress"] = c.Progress
	c.fieldMap["enabled"] = c.Enabled
	c.fieldMap["sync_status"] = c.SyncStatus
	c.fieldMap["last_sync"] = c.LastSync
	c.fieldMap["last_sync_end_at"] = c.LastSyncEndAt
	c.fieldMap["tenant_id"] = c.TenantID
	c.fieldMap["access_url"] = c.AccessURL
	c.fieldMap["account"] = c.Account
	c.fieldMap["secret"] = c.Secret
	c.fieldMap["account_id"] = c.AccountID
	c.fieldMap["is_public_cloud"] = c.IsPublicCloud
	c.fieldMap["is_on_premise"] = c.IsOnPremise
	c.fieldMap["provider"] = c.Provider
	c.fieldMap["balance"] = c.Balance
	c.fieldMap["currency"] = c.Currency
	c.fieldMap["probe_at"] = c.ProbeAt
	c.fieldMap["health_status"] = c.HealthStatus
	c.fieldMap["error_count"] = c.ErrorCount
	c.fieldMap["auto_create_project"] = c.AutoCreateProject
	c.fieldMap["auto_create_project_for_provider"] = c.AutoCreateProjectForProvider
	c.fieldMap["version"] = c.Version
	c.fieldMap["sysinfo"] = c.Sysinfo
	c.fieldMap["brand"] = c.Brand
	c.fieldMap["options"] = c.Options
	c.fieldMap["share_mode"] = c.ShareMode
	c.fieldMap["proxy_setting_id"] = c.ProxySettingID
	c.fieldMap["iam_login_url"] = c.IamLoginURL
	c.fieldMap["saml_auth"] = c.SamlAuth
	c.fieldMap["project_mapping_id"] = c.ProjectMappingID
	c.fieldMap["enable_project_sync"] = c.EnableProjectSync
	c.fieldMap["enable_resource_sync"] = c.EnableResourceSync
	c.fieldMap["read_only"] = c.ReadOnly
	c.fieldMap["sub_accounts"] = c.SubAccounts
	c.fieldMap["lake_of_permissions"] = c.LakeOfPermissions
	c.fieldMap["skip_sync_resources"] = c.SkipSyncResources
}

func (c cloudaccountsTbl) clone(db *gorm.DB) cloudaccountsTbl {
	c.cloudaccountsTblDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cloudaccountsTbl) replaceDB(db *gorm.DB) cloudaccountsTbl {
	c.cloudaccountsTblDo.ReplaceDB(db)
	return c
}

type cloudaccountsTblDo struct{ gen.DO }

func (c cloudaccountsTblDo) Debug() *cloudaccountsTblDo {
	return c.withDO(c.DO.Debug())
}

func (c cloudaccountsTblDo) WithContext(ctx context.Context) *cloudaccountsTblDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cloudaccountsTblDo) ReadDB() *cloudaccountsTblDo {
	return c.Clauses(dbresolver.Read)
}

func (c cloudaccountsTblDo) WriteDB() *cloudaccountsTblDo {
	return c.Clauses(dbresolver.Write)
}

func (c cloudaccountsTblDo) Session(config *gorm.Session) *cloudaccountsTblDo {
	return c.withDO(c.DO.Session(config))
}

func (c cloudaccountsTblDo) Clauses(conds ...clause.Expression) *cloudaccountsTblDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cloudaccountsTblDo) Returning(value interface{}, columns ...string) *cloudaccountsTblDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cloudaccountsTblDo) Not(conds ...gen.Condition) *cloudaccountsTblDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cloudaccountsTblDo) Or(conds ...gen.Condition) *cloudaccountsTblDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cloudaccountsTblDo) Select(conds ...field.Expr) *cloudaccountsTblDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cloudaccountsTblDo) Where(conds ...gen.Condition) *cloudaccountsTblDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cloudaccountsTblDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *cloudaccountsTblDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c cloudaccountsTblDo) Order(conds ...field.Expr) *cloudaccountsTblDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cloudaccountsTblDo) Distinct(cols ...field.Expr) *cloudaccountsTblDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cloudaccountsTblDo) Omit(cols ...field.Expr) *cloudaccountsTblDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cloudaccountsTblDo) Join(table schema.Tabler, on ...field.Expr) *cloudaccountsTblDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cloudaccountsTblDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cloudaccountsTblDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cloudaccountsTblDo) RightJoin(table schema.Tabler, on ...field.Expr) *cloudaccountsTblDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cloudaccountsTblDo) Group(cols ...field.Expr) *cloudaccountsTblDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cloudaccountsTblDo) Having(conds ...gen.Condition) *cloudaccountsTblDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cloudaccountsTblDo) Limit(limit int) *cloudaccountsTblDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cloudaccountsTblDo) Offset(offset int) *cloudaccountsTblDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cloudaccountsTblDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cloudaccountsTblDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cloudaccountsTblDo) Unscoped() *cloudaccountsTblDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cloudaccountsTblDo) Create(values ...*model.CloudaccountsTbl) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cloudaccountsTblDo) CreateInBatches(values []*model.CloudaccountsTbl, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cloudaccountsTblDo) Save(values ...*model.CloudaccountsTbl) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cloudaccountsTblDo) First() (*model.CloudaccountsTbl, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudaccountsTbl), nil
	}
}

func (c cloudaccountsTblDo) Take() (*model.CloudaccountsTbl, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudaccountsTbl), nil
	}
}

func (c cloudaccountsTblDo) Last() (*model.CloudaccountsTbl, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudaccountsTbl), nil
	}
}

func (c cloudaccountsTblDo) Find() ([]*model.CloudaccountsTbl, error) {
	result, err := c.DO.Find()
	return result.([]*model.CloudaccountsTbl), err
}

func (c cloudaccountsTblDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CloudaccountsTbl, err error) {
	buf := make([]*model.CloudaccountsTbl, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cloudaccountsTblDo) FindInBatches(result *[]*model.CloudaccountsTbl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cloudaccountsTblDo) Attrs(attrs ...field.AssignExpr) *cloudaccountsTblDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cloudaccountsTblDo) Assign(attrs ...field.AssignExpr) *cloudaccountsTblDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cloudaccountsTblDo) Joins(fields ...field.RelationField) *cloudaccountsTblDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cloudaccountsTblDo) Preload(fields ...field.RelationField) *cloudaccountsTblDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cloudaccountsTblDo) FirstOrInit() (*model.CloudaccountsTbl, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudaccountsTbl), nil
	}
}

func (c cloudaccountsTblDo) FirstOrCreate() (*model.CloudaccountsTbl, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudaccountsTbl), nil
	}
}

func (c cloudaccountsTblDo) FindByPage(offset int, limit int) (result []*model.CloudaccountsTbl, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cloudaccountsTblDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cloudaccountsTblDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cloudaccountsTblDo) Delete(models ...*model.CloudaccountsTbl) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cloudaccountsTblDo) withDO(do gen.Dao) *cloudaccountsTblDo {
	c.DO = *do.(*gen.DO)
	return c
}
