// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Havens-blog/e-cas-service/internal/data/model"
)

func newCloudprovidersTbl(db *gorm.DB, opts ...gen.DOOption) cloudprovidersTbl {
	_cloudprovidersTbl := cloudprovidersTbl{}

	_cloudprovidersTbl.cloudprovidersTblDo.UseDB(db, opts...)
	_cloudprovidersTbl.cloudprovidersTblDo.UseModel(&model.CloudprovidersTbl{})

	tableName := _cloudprovidersTbl.cloudprovidersTblDo.TableName()
	_cloudprovidersTbl.ALL = field.NewAsterisk(tableName)
	_cloudprovidersTbl.CreatedAt = field.NewTime(tableName, "created_at")
	_cloudprovidersTbl.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cloudprovidersTbl.UpdateVersion = field.NewInt32(tableName, "update_version")
	_cloudprovidersTbl.DeletedAt = field.NewField(tableName, "deleted_at")
	_cloudprovidersTbl.Deleted = field.NewBool(tableName, "deleted")
	_cloudprovidersTbl.ID = field.NewString(tableName, "id")
	_cloudprovidersTbl.Description = field.NewString(tableName, "description")
	_cloudprovidersTbl.IsEmulated = field.NewBool(tableName, "is_emulated")
	_cloudprovidersTbl.Name = field.NewString(tableName, "name")
	_cloudprovidersTbl.Status = field.NewString(tableName, "status")
	_cloudprovidersTbl.Progress = field.NewFloat32(tableName, "progress")
	_cloudprovidersTbl.Enabled = field.NewBool(tableName, "enabled")
	_cloudprovidersTbl.DomainID = field.NewString(tableName, "domain_id")
	_cloudprovidersTbl.TenantID = field.NewString(tableName, "tenant_id")
	_cloudprovidersTbl.ExternalID = field.NewString(tableName, "external_id")
	_cloudprovidersTbl.ImportedAt = field.NewTime(tableName, "imported_at")
	_cloudprovidersTbl.Source = field.NewString(tableName, "source")
	_cloudprovidersTbl.SyncStatus = field.NewString(tableName, "sync_status")
	_cloudprovidersTbl.LastSync = field.NewTime(tableName, "last_sync")
	_cloudprovidersTbl.LastSyncEndAt = field.NewTime(tableName, "last_sync_end_at")
	_cloudprovidersTbl.HealthStatus = field.NewString(tableName, "health_status")
	_cloudprovidersTbl.AccessURL = field.NewString(tableName, "access_url")
	_cloudprovidersTbl.Account = field.NewString(tableName, "account")
	_cloudprovidersTbl.Secret = field.NewString(tableName, "secret")
	_cloudprovidersTbl.CloudaccountID = field.NewString(tableName, "cloudaccount_id")
	_cloudprovidersTbl.Provider = field.NewString(tableName, "provider")
	_cloudprovidersTbl.ProjectSrc = field.NewString(tableName, "project_src")
	_cloudprovidersTbl.ProjectMappingID = field.NewString(tableName, "project_mapping_id")
	_cloudprovidersTbl.EnableProjectSync = field.NewBool(tableName, "enable_project_sync")
	_cloudprovidersTbl.EnableResourceSync = field.NewBool(tableName, "enable_resource_sync")

	_cloudprovidersTbl.fillFieldMap()

	return _cloudprovidersTbl
}

type cloudprovidersTbl struct {
	cloudprovidersTblDo cloudprovidersTblDo

	ALL                field.Asterisk
	CreatedAt          field.Time
	UpdatedAt          field.Time
	UpdateVersion      field.Int32
	DeletedAt          field.Field
	Deleted            field.Bool
	ID                 field.String
	Description        field.String
	IsEmulated         field.Bool
	Name               field.String
	Status             field.String
	Progress           field.Float32
	Enabled            field.Bool
	DomainID           field.String
	TenantID           field.String
	ExternalID         field.String
	ImportedAt         field.Time
	Source             field.String
	SyncStatus         field.String
	LastSync           field.Time
	LastSyncEndAt      field.Time
	HealthStatus       field.String
	AccessURL          field.String
	Account            field.String
	Secret             field.String
	CloudaccountID     field.String
	Provider           field.String
	ProjectSrc         field.String
	ProjectMappingID   field.String
	EnableProjectSync  field.Bool
	EnableResourceSync field.Bool

	fieldMap map[string]field.Expr
}

func (c cloudprovidersTbl) Table(newTableName string) *cloudprovidersTbl {
	c.cloudprovidersTblDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cloudprovidersTbl) As(alias string) *cloudprovidersTbl {
	c.cloudprovidersTblDo.DO = *(c.cloudprovidersTblDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cloudprovidersTbl) updateTableName(table string) *cloudprovidersTbl {
	c.ALL = field.NewAsterisk(table)
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.UpdateVersion = field.NewInt32(table, "update_version")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Deleted = field.NewBool(table, "deleted")
	c.ID = field.NewString(table, "id")
	c.Description = field.NewString(table, "description")
	c.IsEmulated = field.NewBool(table, "is_emulated")
	c.Name = field.NewString(table, "name")
	c.Status = field.NewString(table, "status")
	c.Progress = field.NewFloat32(table, "progress")
	c.Enabled = field.NewBool(table, "enabled")
	c.DomainID = field.NewString(table, "domain_id")
	c.TenantID = field.NewString(table, "tenant_id")
	c.ExternalID = field.NewString(table, "external_id")
	c.ImportedAt = field.NewTime(table, "imported_at")
	c.Source = field.NewString(table, "source")
	c.SyncStatus = field.NewString(table, "sync_status")
	c.LastSync = field.NewTime(table, "last_sync")
	c.LastSyncEndAt = field.NewTime(table, "last_sync_end_at")
	c.HealthStatus = field.NewString(table, "health_status")
	c.AccessURL = field.NewString(table, "access_url")
	c.Account = field.NewString(table, "account")
	c.Secret = field.NewString(table, "secret")
	c.CloudaccountID = field.NewString(table, "cloudaccount_id")
	c.Provider = field.NewString(table, "provider")
	c.ProjectSrc = field.NewString(table, "project_src")
	c.ProjectMappingID = field.NewString(table, "project_mapping_id")
	c.EnableProjectSync = field.NewBool(table, "enable_project_sync")
	c.EnableResourceSync = field.NewBool(table, "enable_resource_sync")

	c.fillFieldMap()

	return c
}

func (c *cloudprovidersTbl) WithContext(ctx context.Context) *cloudprovidersTblDo {
	return c.cloudprovidersTblDo.WithContext(ctx)
}

func (c cloudprovidersTbl) TableName() string { return c.cloudprovidersTblDo.TableName() }

func (c cloudprovidersTbl) Alias() string { return c.cloudprovidersTblDo.Alias() }

func (c *cloudprovidersTbl) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cloudprovidersTbl) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 30)
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["update_version"] = c.UpdateVersion
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["deleted"] = c.Deleted
	c.fieldMap["id"] = c.ID
	c.fieldMap["description"] = c.Description
	c.fieldMap["is_emulated"] = c.IsEmulated
	c.fieldMap["name"] = c.Name
	c.fieldMap["status"] = c.Status
	c.fieldMap["progress"] = c.Progress
	c.fieldMap["enabled"] = c.Enabled
	c.fieldMap["domain_id"] = c.DomainID
	c.fieldMap["tenant_id"] = c.TenantID
	c.fieldMap["external_id"] = c.ExternalID
	c.fieldMap["imported_at"] = c.ImportedAt
	c.fieldMap["source"] = c.Source
	c.fieldMap["sync_status"] = c.SyncStatus
	c.fieldMap["last_sync"] = c.LastSync
	c.fieldMap["last_sync_end_at"] = c.LastSyncEndAt
	c.fieldMap["health_status"] = c.HealthStatus
	c.fieldMap["access_url"] = c.AccessURL
	c.fieldMap["account"] = c.Account
	c.fieldMap["secret"] = c.Secret
	c.fieldMap["cloudaccount_id"] = c.CloudaccountID
	c.fieldMap["provider"] = c.Provider
	c.fieldMap["project_src"] = c.ProjectSrc
	c.fieldMap["project_mapping_id"] = c.ProjectMappingID
	c.fieldMap["enable_project_sync"] = c.EnableProjectSync
	c.fieldMap["enable_resource_sync"] = c.EnableResourceSync
}

func (c cloudprovidersTbl) clone(db *gorm.DB) cloudprovidersTbl {
	c.cloudprovidersTblDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cloudprovidersTbl) replaceDB(db *gorm.DB) cloudprovidersTbl {
	c.cloudprovidersTblDo.ReplaceDB(db)
	return c
}

type cloudprovidersTblDo struct{ gen.DO }

func (c cloudprovidersTblDo) Debug() *cloudprovidersTblDo {
	return c.withDO(c.DO.Debug())
}

func (c cloudprovidersTblDo) WithContext(ctx context.Context) *cloudprovidersTblDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cloudprovidersTblDo) ReadDB() *cloudprovidersTblDo {
	return c.Clauses(dbresolver.Read)
}

func (c cloudprovidersTblDo) WriteDB() *cloudprovidersTblDo {
	return c.Clauses(dbresolver.Write)
}

func (c cloudprovidersTblDo) Session(config *gorm.Session) *cloudprovidersTblDo {
	return c.withDO(c.DO.Session(config))
}

func (c cloudprovidersTblDo) Clauses(conds ...clause.Expression) *cloudprovidersTblDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cloudprovidersTblDo) Returning(value interface{}, columns ...string) *cloudprovidersTblDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cloudprovidersTblDo) Not(conds ...gen.Condition) *cloudprovidersTblDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cloudprovidersTblDo) Or(conds ...gen.Condition) *cloudprovidersTblDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cloudprovidersTblDo) Select(conds ...field.Expr) *cloudprovidersTblDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cloudprovidersTblDo) Where(conds ...gen.Condition) *cloudprovidersTblDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cloudprovidersTblDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *cloudprovidersTblDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c cloudprovidersTblDo) Order(conds ...field.Expr) *cloudprovidersTblDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cloudprovidersTblDo) Distinct(cols ...field.Expr) *cloudprovidersTblDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cloudprovidersTblDo) Omit(cols ...field.Expr) *cloudprovidersTblDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cloudprovidersTblDo) Join(table schema.Tabler, on ...field.Expr) *cloudprovidersTblDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cloudprovidersTblDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cloudprovidersTblDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cloudprovidersTblDo) RightJoin(table schema.Tabler, on ...field.Expr) *cloudprovidersTblDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cloudprovidersTblDo) Group(cols ...field.Expr) *cloudprovidersTblDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cloudprovidersTblDo) Having(conds ...gen.Condition) *cloudprovidersTblDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cloudprovidersTblDo) Limit(limit int) *cloudprovidersTblDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cloudprovidersTblDo) Offset(offset int) *cloudprovidersTblDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cloudprovidersTblDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cloudprovidersTblDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cloudprovidersTblDo) Unscoped() *cloudprovidersTblDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cloudprovidersTblDo) Create(values ...*model.CloudprovidersTbl) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cloudprovidersTblDo) CreateInBatches(values []*model.CloudprovidersTbl, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cloudprovidersTblDo) Save(values ...*model.CloudprovidersTbl) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cloudprovidersTblDo) First() (*model.CloudprovidersTbl, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudprovidersTbl), nil
	}
}

func (c cloudprovidersTblDo) Take() (*model.CloudprovidersTbl, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudprovidersTbl), nil
	}
}

func (c cloudprovidersTblDo) Last() (*model.CloudprovidersTbl, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudprovidersTbl), nil
	}
}

func (c cloudprovidersTblDo) Find() ([]*model.CloudprovidersTbl, error) {
	result, err := c.DO.Find()
	return result.([]*model.CloudprovidersTbl), err
}

func (c cloudprovidersTblDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CloudprovidersTbl, err error) {
	buf := make([]*model.CloudprovidersTbl, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cloudprovidersTblDo) FindInBatches(result *[]*model.CloudprovidersTbl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cloudprovidersTblDo) Attrs(attrs ...field.AssignExpr) *cloudprovidersTblDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cloudprovidersTblDo) Assign(attrs ...field.AssignExpr) *cloudprovidersTblDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cloudprovidersTblDo) Joins(fields ...field.RelationField) *cloudprovidersTblDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cloudprovidersTblDo) Preload(fields ...field.RelationField) *cloudprovidersTblDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cloudprovidersTblDo) FirstOrInit() (*model.CloudprovidersTbl, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudprovidersTbl), nil
	}
}

func (c cloudprovidersTblDo) FirstOrCreate() (*model.CloudprovidersTbl, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudprovidersTbl), nil
	}
}

func (c cloudprovidersTblDo) FindByPage(offset int, limit int) (result []*model.CloudprovidersTbl, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cloudprovidersTblDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cloudprovidersTblDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cloudprovidersTblDo) Delete(models ...*model.CloudprovidersTbl) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cloudprovidersTblDo) withDO(do gen.Dao) *cloudprovidersTblDo {
	c.DO = *do.(*gen.DO)
	return c
}
