// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Havens-blog/e-cas-service/internal/data/model"
)

func newServerskusTbl(db *gorm.DB, opts ...gen.DOOption) serverskusTbl {
	_serverskusTbl := serverskusTbl{}

	_serverskusTbl.serverskusTblDo.UseDB(db, opts...)
	_serverskusTbl.serverskusTblDo.UseModel(&model.ServerskusTbl{})

	tableName := _serverskusTbl.serverskusTblDo.TableName()
	_serverskusTbl.ALL = field.NewAsterisk(tableName)
	_serverskusTbl.CreatedAt = field.NewTime(tableName, "created_at")
	_serverskusTbl.UpdatedAt = field.NewTime(tableName, "updated_at")
	_serverskusTbl.UpdateVersion = field.NewInt32(tableName, "update_version")
	_serverskusTbl.DeletedAt = field.NewField(tableName, "deleted_at")
	_serverskusTbl.Deleted = field.NewBool(tableName, "deleted")
	_serverskusTbl.ID = field.NewString(tableName, "id")
	_serverskusTbl.Description = field.NewString(tableName, "description")
	_serverskusTbl.IsEmulated = field.NewBool(tableName, "is_emulated")
	_serverskusTbl.Name = field.NewString(tableName, "name")
	_serverskusTbl.Status = field.NewString(tableName, "status")
	_serverskusTbl.Progress = field.NewFloat32(tableName, "progress")
	_serverskusTbl.Enabled = field.NewBool(tableName, "enabled")
	_serverskusTbl.ExternalID = field.NewString(tableName, "external_id")
	_serverskusTbl.ImportedAt = field.NewTime(tableName, "imported_at")
	_serverskusTbl.Source = field.NewString(tableName, "source")
	_serverskusTbl.CloudregionID = field.NewString(tableName, "cloudregion_id")
	_serverskusTbl.ZoneID = field.NewString(tableName, "zone_id")
	_serverskusTbl.InstanceTypeFamily = field.NewString(tableName, "instance_type_family")
	_serverskusTbl.InstanceTypeCategory = field.NewString(tableName, "instance_type_category")
	_serverskusTbl.LocalCategory = field.NewString(tableName, "local_category")
	_serverskusTbl.PrepaidStatus = field.NewString(tableName, "prepaid_status")
	_serverskusTbl.PostpaidStatus = field.NewString(tableName, "postpaid_status")
	_serverskusTbl.CPUArch = field.NewString(tableName, "cpu_arch")
	_serverskusTbl.CPUCoreCount = field.NewInt32(tableName, "cpu_core_count")
	_serverskusTbl.MemorySizeMb = field.NewInt32(tableName, "memory_size_mb")
	_serverskusTbl.OsName = field.NewString(tableName, "os_name")
	_serverskusTbl.SysDiskResizable = field.NewBool(tableName, "sys_disk_resizable")
	_serverskusTbl.SysDiskType = field.NewString(tableName, "sys_disk_type")
	_serverskusTbl.SysDiskMinSizeGb = field.NewInt32(tableName, "sys_disk_min_size_gb")
	_serverskusTbl.SysDiskMaxSizeGb = field.NewInt32(tableName, "sys_disk_max_size_gb")
	_serverskusTbl.AttachedDiskType = field.NewString(tableName, "attached_disk_type")
	_serverskusTbl.AttachedDiskSizeGb = field.NewInt32(tableName, "attached_disk_size_gb")
	_serverskusTbl.AttachedDiskCount = field.NewInt32(tableName, "attached_disk_count")
	_serverskusTbl.DataDiskTypes = field.NewString(tableName, "data_disk_types")
	_serverskusTbl.DataDiskMaxCount = field.NewInt32(tableName, "data_disk_max_count")
	_serverskusTbl.NicType = field.NewString(tableName, "nic_type")
	_serverskusTbl.NicMaxCount = field.NewInt32(tableName, "nic_max_count")
	_serverskusTbl.GpuAttachable = field.NewBool(tableName, "gpu_attachable")
	_serverskusTbl.GpuSpec = field.NewString(tableName, "gpu_spec")
	_serverskusTbl.GpuCount = field.NewString(tableName, "gpu_count")
	_serverskusTbl.GpuMaxCount = field.NewInt32(tableName, "gpu_max_count")
	_serverskusTbl.Provider = field.NewString(tableName, "provider")
	_serverskusTbl.Md5 = field.NewString(tableName, "md5")

	_serverskusTbl.fillFieldMap()

	return _serverskusTbl
}

type serverskusTbl struct {
	serverskusTblDo serverskusTblDo

	ALL                  field.Asterisk
	CreatedAt            field.Time
	UpdatedAt            field.Time
	UpdateVersion        field.Int32
	DeletedAt            field.Field
	Deleted              field.Bool
	ID                   field.String
	Description          field.String
	IsEmulated           field.Bool
	Name                 field.String
	Status               field.String
	Progress             field.Float32
	Enabled              field.Bool
	ExternalID           field.String
	ImportedAt           field.Time
	Source               field.String
	CloudregionID        field.String
	ZoneID               field.String
	InstanceTypeFamily   field.String
	InstanceTypeCategory field.String
	LocalCategory        field.String
	PrepaidStatus        field.String
	PostpaidStatus       field.String
	CPUArch              field.String
	CPUCoreCount         field.Int32
	MemorySizeMb         field.Int32
	OsName               field.String
	SysDiskResizable     field.Bool
	SysDiskType          field.String
	SysDiskMinSizeGb     field.Int32
	SysDiskMaxSizeGb     field.Int32
	AttachedDiskType     field.String
	AttachedDiskSizeGb   field.Int32
	AttachedDiskCount    field.Int32
	DataDiskTypes        field.String
	DataDiskMaxCount     field.Int32
	NicType              field.String
	NicMaxCount          field.Int32
	GpuAttachable        field.Bool
	GpuSpec              field.String
	GpuCount             field.String
	GpuMaxCount          field.Int32
	Provider             field.String
	Md5                  field.String

	fieldMap map[string]field.Expr
}

func (s serverskusTbl) Table(newTableName string) *serverskusTbl {
	s.serverskusTblDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serverskusTbl) As(alias string) *serverskusTbl {
	s.serverskusTblDo.DO = *(s.serverskusTblDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serverskusTbl) updateTableName(table string) *serverskusTbl {
	s.ALL = field.NewAsterisk(table)
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.UpdateVersion = field.NewInt32(table, "update_version")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.Deleted = field.NewBool(table, "deleted")
	s.ID = field.NewString(table, "id")
	s.Description = field.NewString(table, "description")
	s.IsEmulated = field.NewBool(table, "is_emulated")
	s.Name = field.NewString(table, "name")
	s.Status = field.NewString(table, "status")
	s.Progress = field.NewFloat32(table, "progress")
	s.Enabled = field.NewBool(table, "enabled")
	s.ExternalID = field.NewString(table, "external_id")
	s.ImportedAt = field.NewTime(table, "imported_at")
	s.Source = field.NewString(table, "source")
	s.CloudregionID = field.NewString(table, "cloudregion_id")
	s.ZoneID = field.NewString(table, "zone_id")
	s.InstanceTypeFamily = field.NewString(table, "instance_type_family")
	s.InstanceTypeCategory = field.NewString(table, "instance_type_category")
	s.LocalCategory = field.NewString(table, "local_category")
	s.PrepaidStatus = field.NewString(table, "prepaid_status")
	s.PostpaidStatus = field.NewString(table, "postpaid_status")
	s.CPUArch = field.NewString(table, "cpu_arch")
	s.CPUCoreCount = field.NewInt32(table, "cpu_core_count")
	s.MemorySizeMb = field.NewInt32(table, "memory_size_mb")
	s.OsName = field.NewString(table, "os_name")
	s.SysDiskResizable = field.NewBool(table, "sys_disk_resizable")
	s.SysDiskType = field.NewString(table, "sys_disk_type")
	s.SysDiskMinSizeGb = field.NewInt32(table, "sys_disk_min_size_gb")
	s.SysDiskMaxSizeGb = field.NewInt32(table, "sys_disk_max_size_gb")
	s.AttachedDiskType = field.NewString(table, "attached_disk_type")
	s.AttachedDiskSizeGb = field.NewInt32(table, "attached_disk_size_gb")
	s.AttachedDiskCount = field.NewInt32(table, "attached_disk_count")
	s.DataDiskTypes = field.NewString(table, "data_disk_types")
	s.DataDiskMaxCount = field.NewInt32(table, "data_disk_max_count")
	s.NicType = field.NewString(table, "nic_type")
	s.NicMaxCount = field.NewInt32(table, "nic_max_count")
	s.GpuAttachable = field.NewBool(table, "gpu_attachable")
	s.GpuSpec = field.NewString(table, "gpu_spec")
	s.GpuCount = field.NewString(table, "gpu_count")
	s.GpuMaxCount = field.NewInt32(table, "gpu_max_count")
	s.Provider = field.NewString(table, "provider")
	s.Md5 = field.NewString(table, "md5")

	s.fillFieldMap()

	return s
}

func (s *serverskusTbl) WithContext(ctx context.Context) *serverskusTblDo {
	return s.serverskusTblDo.WithContext(ctx)
}

func (s serverskusTbl) TableName() string { return s.serverskusTblDo.TableName() }

func (s serverskusTbl) Alias() string { return s.serverskusTblDo.Alias() }

func (s *serverskusTbl) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serverskusTbl) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 43)
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["update_version"] = s.UpdateVersion
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["deleted"] = s.Deleted
	s.fieldMap["id"] = s.ID
	s.fieldMap["description"] = s.Description
	s.fieldMap["is_emulated"] = s.IsEmulated
	s.fieldMap["name"] = s.Name
	s.fieldMap["status"] = s.Status
	s.fieldMap["progress"] = s.Progress
	s.fieldMap["enabled"] = s.Enabled
	s.fieldMap["external_id"] = s.ExternalID
	s.fieldMap["imported_at"] = s.ImportedAt
	s.fieldMap["source"] = s.Source
	s.fieldMap["cloudregion_id"] = s.CloudregionID
	s.fieldMap["zone_id"] = s.ZoneID
	s.fieldMap["instance_type_family"] = s.InstanceTypeFamily
	s.fieldMap["instance_type_category"] = s.InstanceTypeCategory
	s.fieldMap["local_category"] = s.LocalCategory
	s.fieldMap["prepaid_status"] = s.PrepaidStatus
	s.fieldMap["postpaid_status"] = s.PostpaidStatus
	s.fieldMap["cpu_arch"] = s.CPUArch
	s.fieldMap["cpu_core_count"] = s.CPUCoreCount
	s.fieldMap["memory_size_mb"] = s.MemorySizeMb
	s.fieldMap["os_name"] = s.OsName
	s.fieldMap["sys_disk_resizable"] = s.SysDiskResizable
	s.fieldMap["sys_disk_type"] = s.SysDiskType
	s.fieldMap["sys_disk_min_size_gb"] = s.SysDiskMinSizeGb
	s.fieldMap["sys_disk_max_size_gb"] = s.SysDiskMaxSizeGb
	s.fieldMap["attached_disk_type"] = s.AttachedDiskType
	s.fieldMap["attached_disk_size_gb"] = s.AttachedDiskSizeGb
	s.fieldMap["attached_disk_count"] = s.AttachedDiskCount
	s.fieldMap["data_disk_types"] = s.DataDiskTypes
	s.fieldMap["data_disk_max_count"] = s.DataDiskMaxCount
	s.fieldMap["nic_type"] = s.NicType
	s.fieldMap["nic_max_count"] = s.NicMaxCount
	s.fieldMap["gpu_attachable"] = s.GpuAttachable
	s.fieldMap["gpu_spec"] = s.GpuSpec
	s.fieldMap["gpu_count"] = s.GpuCount
	s.fieldMap["gpu_max_count"] = s.GpuMaxCount
	s.fieldMap["provider"] = s.Provider
	s.fieldMap["md5"] = s.Md5
}

func (s serverskusTbl) clone(db *gorm.DB) serverskusTbl {
	s.serverskusTblDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serverskusTbl) replaceDB(db *gorm.DB) serverskusTbl {
	s.serverskusTblDo.ReplaceDB(db)
	return s
}

type serverskusTblDo struct{ gen.DO }

func (s serverskusTblDo) Debug() *serverskusTblDo {
	return s.withDO(s.DO.Debug())
}

func (s serverskusTblDo) WithContext(ctx context.Context) *serverskusTblDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serverskusTblDo) ReadDB() *serverskusTblDo {
	return s.Clauses(dbresolver.Read)
}

func (s serverskusTblDo) WriteDB() *serverskusTblDo {
	return s.Clauses(dbresolver.Write)
}

func (s serverskusTblDo) Session(config *gorm.Session) *serverskusTblDo {
	return s.withDO(s.DO.Session(config))
}

func (s serverskusTblDo) Clauses(conds ...clause.Expression) *serverskusTblDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serverskusTblDo) Returning(value interface{}, columns ...string) *serverskusTblDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serverskusTblDo) Not(conds ...gen.Condition) *serverskusTblDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serverskusTblDo) Or(conds ...gen.Condition) *serverskusTblDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serverskusTblDo) Select(conds ...field.Expr) *serverskusTblDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serverskusTblDo) Where(conds ...gen.Condition) *serverskusTblDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serverskusTblDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *serverskusTblDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s serverskusTblDo) Order(conds ...field.Expr) *serverskusTblDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serverskusTblDo) Distinct(cols ...field.Expr) *serverskusTblDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serverskusTblDo) Omit(cols ...field.Expr) *serverskusTblDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serverskusTblDo) Join(table schema.Tabler, on ...field.Expr) *serverskusTblDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serverskusTblDo) LeftJoin(table schema.Tabler, on ...field.Expr) *serverskusTblDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serverskusTblDo) RightJoin(table schema.Tabler, on ...field.Expr) *serverskusTblDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serverskusTblDo) Group(cols ...field.Expr) *serverskusTblDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serverskusTblDo) Having(conds ...gen.Condition) *serverskusTblDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serverskusTblDo) Limit(limit int) *serverskusTblDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serverskusTblDo) Offset(offset int) *serverskusTblDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serverskusTblDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *serverskusTblDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serverskusTblDo) Unscoped() *serverskusTblDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serverskusTblDo) Create(values ...*model.ServerskusTbl) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serverskusTblDo) CreateInBatches(values []*model.ServerskusTbl, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serverskusTblDo) Save(values ...*model.ServerskusTbl) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serverskusTblDo) First() (*model.ServerskusTbl, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerskusTbl), nil
	}
}

func (s serverskusTblDo) Take() (*model.ServerskusTbl, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerskusTbl), nil
	}
}

func (s serverskusTblDo) Last() (*model.ServerskusTbl, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerskusTbl), nil
	}
}

func (s serverskusTblDo) Find() ([]*model.ServerskusTbl, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServerskusTbl), err
}

func (s serverskusTblDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServerskusTbl, err error) {
	buf := make([]*model.ServerskusTbl, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serverskusTblDo) FindInBatches(result *[]*model.ServerskusTbl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serverskusTblDo) Attrs(attrs ...field.AssignExpr) *serverskusTblDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serverskusTblDo) Assign(attrs ...field.AssignExpr) *serverskusTblDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serverskusTblDo) Joins(fields ...field.RelationField) *serverskusTblDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serverskusTblDo) Preload(fields ...field.RelationField) *serverskusTblDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serverskusTblDo) FirstOrInit() (*model.ServerskusTbl, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerskusTbl), nil
	}
}

func (s serverskusTblDo) FirstOrCreate() (*model.ServerskusTbl, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServerskusTbl), nil
	}
}

func (s serverskusTblDo) FindByPage(offset int, limit int) (result []*model.ServerskusTbl, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serverskusTblDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serverskusTblDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serverskusTblDo) Delete(models ...*model.ServerskusTbl) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serverskusTblDo) withDO(do gen.Dao) *serverskusTblDo {
	s.DO = *do.(*gen.DO)
	return s
}
