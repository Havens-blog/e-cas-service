// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Havens-blog/e-cas-service/internal/data/model"
)

func newZonesTbl(db *gorm.DB, opts ...gen.DOOption) zonesTbl {
	_zonesTbl := zonesTbl{}

	_zonesTbl.zonesTblDo.UseDB(db, opts...)
	_zonesTbl.zonesTblDo.UseModel(&model.ZonesTbl{})

	tableName := _zonesTbl.zonesTblDo.TableName()
	_zonesTbl.ALL = field.NewAsterisk(tableName)
	_zonesTbl.CreatedAt = field.NewTime(tableName, "created_at")
	_zonesTbl.UpdatedAt = field.NewTime(tableName, "updated_at")
	_zonesTbl.UpdateVersion = field.NewInt32(tableName, "update_version")
	_zonesTbl.DeletedAt = field.NewField(tableName, "deleted_at")
	_zonesTbl.Deleted = field.NewBool(tableName, "deleted")
	_zonesTbl.ID = field.NewString(tableName, "id")
	_zonesTbl.Description = field.NewString(tableName, "description")
	_zonesTbl.IsEmulated = field.NewBool(tableName, "is_emulated")
	_zonesTbl.Name = field.NewString(tableName, "name")
	_zonesTbl.Status = field.NewString(tableName, "status")
	_zonesTbl.Progress = field.NewFloat32(tableName, "progress")
	_zonesTbl.ExternalID = field.NewString(tableName, "external_id")
	_zonesTbl.ImportedAt = field.NewTime(tableName, "imported_at")
	_zonesTbl.Source = field.NewString(tableName, "source")
	_zonesTbl.CloudregionID = field.NewString(tableName, "cloudregion_id")
	_zonesTbl.Location = field.NewString(tableName, "location")
	_zonesTbl.Contacts = field.NewString(tableName, "contacts")
	_zonesTbl.NameCn = field.NewString(tableName, "name_cn")
	_zonesTbl.ManagerURI = field.NewString(tableName, "manager_uri")

	_zonesTbl.fillFieldMap()

	return _zonesTbl
}

type zonesTbl struct {
	zonesTblDo zonesTblDo

	ALL           field.Asterisk
	CreatedAt     field.Time
	UpdatedAt     field.Time
	UpdateVersion field.Int32
	DeletedAt     field.Field
	Deleted       field.Bool
	ID            field.String
	Description   field.String
	IsEmulated    field.Bool
	Name          field.String
	Status        field.String
	Progress      field.Float32
	ExternalID    field.String
	ImportedAt    field.Time
	Source        field.String
	CloudregionID field.String
	Location      field.String
	Contacts      field.String
	NameCn        field.String
	ManagerURI    field.String

	fieldMap map[string]field.Expr
}

func (z zonesTbl) Table(newTableName string) *zonesTbl {
	z.zonesTblDo.UseTable(newTableName)
	return z.updateTableName(newTableName)
}

func (z zonesTbl) As(alias string) *zonesTbl {
	z.zonesTblDo.DO = *(z.zonesTblDo.As(alias).(*gen.DO))
	return z.updateTableName(alias)
}

func (z *zonesTbl) updateTableName(table string) *zonesTbl {
	z.ALL = field.NewAsterisk(table)
	z.CreatedAt = field.NewTime(table, "created_at")
	z.UpdatedAt = field.NewTime(table, "updated_at")
	z.UpdateVersion = field.NewInt32(table, "update_version")
	z.DeletedAt = field.NewField(table, "deleted_at")
	z.Deleted = field.NewBool(table, "deleted")
	z.ID = field.NewString(table, "id")
	z.Description = field.NewString(table, "description")
	z.IsEmulated = field.NewBool(table, "is_emulated")
	z.Name = field.NewString(table, "name")
	z.Status = field.NewString(table, "status")
	z.Progress = field.NewFloat32(table, "progress")
	z.ExternalID = field.NewString(table, "external_id")
	z.ImportedAt = field.NewTime(table, "imported_at")
	z.Source = field.NewString(table, "source")
	z.CloudregionID = field.NewString(table, "cloudregion_id")
	z.Location = field.NewString(table, "location")
	z.Contacts = field.NewString(table, "contacts")
	z.NameCn = field.NewString(table, "name_cn")
	z.ManagerURI = field.NewString(table, "manager_uri")

	z.fillFieldMap()

	return z
}

func (z *zonesTbl) WithContext(ctx context.Context) *zonesTblDo { return z.zonesTblDo.WithContext(ctx) }

func (z zonesTbl) TableName() string { return z.zonesTblDo.TableName() }

func (z zonesTbl) Alias() string { return z.zonesTblDo.Alias() }

func (z *zonesTbl) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := z.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (z *zonesTbl) fillFieldMap() {
	z.fieldMap = make(map[string]field.Expr, 19)
	z.fieldMap["created_at"] = z.CreatedAt
	z.fieldMap["updated_at"] = z.UpdatedAt
	z.fieldMap["update_version"] = z.UpdateVersion
	z.fieldMap["deleted_at"] = z.DeletedAt
	z.fieldMap["deleted"] = z.Deleted
	z.fieldMap["id"] = z.ID
	z.fieldMap["description"] = z.Description
	z.fieldMap["is_emulated"] = z.IsEmulated
	z.fieldMap["name"] = z.Name
	z.fieldMap["status"] = z.Status
	z.fieldMap["progress"] = z.Progress
	z.fieldMap["external_id"] = z.ExternalID
	z.fieldMap["imported_at"] = z.ImportedAt
	z.fieldMap["source"] = z.Source
	z.fieldMap["cloudregion_id"] = z.CloudregionID
	z.fieldMap["location"] = z.Location
	z.fieldMap["contacts"] = z.Contacts
	z.fieldMap["name_cn"] = z.NameCn
	z.fieldMap["manager_uri"] = z.ManagerURI
}

func (z zonesTbl) clone(db *gorm.DB) zonesTbl {
	z.zonesTblDo.ReplaceConnPool(db.Statement.ConnPool)
	return z
}

func (z zonesTbl) replaceDB(db *gorm.DB) zonesTbl {
	z.zonesTblDo.ReplaceDB(db)
	return z
}

type zonesTblDo struct{ gen.DO }

func (z zonesTblDo) Debug() *zonesTblDo {
	return z.withDO(z.DO.Debug())
}

func (z zonesTblDo) WithContext(ctx context.Context) *zonesTblDo {
	return z.withDO(z.DO.WithContext(ctx))
}

func (z zonesTblDo) ReadDB() *zonesTblDo {
	return z.Clauses(dbresolver.Read)
}

func (z zonesTblDo) WriteDB() *zonesTblDo {
	return z.Clauses(dbresolver.Write)
}

func (z zonesTblDo) Session(config *gorm.Session) *zonesTblDo {
	return z.withDO(z.DO.Session(config))
}

func (z zonesTblDo) Clauses(conds ...clause.Expression) *zonesTblDo {
	return z.withDO(z.DO.Clauses(conds...))
}

func (z zonesTblDo) Returning(value interface{}, columns ...string) *zonesTblDo {
	return z.withDO(z.DO.Returning(value, columns...))
}

func (z zonesTblDo) Not(conds ...gen.Condition) *zonesTblDo {
	return z.withDO(z.DO.Not(conds...))
}

func (z zonesTblDo) Or(conds ...gen.Condition) *zonesTblDo {
	return z.withDO(z.DO.Or(conds...))
}

func (z zonesTblDo) Select(conds ...field.Expr) *zonesTblDo {
	return z.withDO(z.DO.Select(conds...))
}

func (z zonesTblDo) Where(conds ...gen.Condition) *zonesTblDo {
	return z.withDO(z.DO.Where(conds...))
}

func (z zonesTblDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *zonesTblDo {
	return z.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (z zonesTblDo) Order(conds ...field.Expr) *zonesTblDo {
	return z.withDO(z.DO.Order(conds...))
}

func (z zonesTblDo) Distinct(cols ...field.Expr) *zonesTblDo {
	return z.withDO(z.DO.Distinct(cols...))
}

func (z zonesTblDo) Omit(cols ...field.Expr) *zonesTblDo {
	return z.withDO(z.DO.Omit(cols...))
}

func (z zonesTblDo) Join(table schema.Tabler, on ...field.Expr) *zonesTblDo {
	return z.withDO(z.DO.Join(table, on...))
}

func (z zonesTblDo) LeftJoin(table schema.Tabler, on ...field.Expr) *zonesTblDo {
	return z.withDO(z.DO.LeftJoin(table, on...))
}

func (z zonesTblDo) RightJoin(table schema.Tabler, on ...field.Expr) *zonesTblDo {
	return z.withDO(z.DO.RightJoin(table, on...))
}

func (z zonesTblDo) Group(cols ...field.Expr) *zonesTblDo {
	return z.withDO(z.DO.Group(cols...))
}

func (z zonesTblDo) Having(conds ...gen.Condition) *zonesTblDo {
	return z.withDO(z.DO.Having(conds...))
}

func (z zonesTblDo) Limit(limit int) *zonesTblDo {
	return z.withDO(z.DO.Limit(limit))
}

func (z zonesTblDo) Offset(offset int) *zonesTblDo {
	return z.withDO(z.DO.Offset(offset))
}

func (z zonesTblDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *zonesTblDo {
	return z.withDO(z.DO.Scopes(funcs...))
}

func (z zonesTblDo) Unscoped() *zonesTblDo {
	return z.withDO(z.DO.Unscoped())
}

func (z zonesTblDo) Create(values ...*model.ZonesTbl) error {
	if len(values) == 0 {
		return nil
	}
	return z.DO.Create(values)
}

func (z zonesTblDo) CreateInBatches(values []*model.ZonesTbl, batchSize int) error {
	return z.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (z zonesTblDo) Save(values ...*model.ZonesTbl) error {
	if len(values) == 0 {
		return nil
	}
	return z.DO.Save(values)
}

func (z zonesTblDo) First() (*model.ZonesTbl, error) {
	if result, err := z.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ZonesTbl), nil
	}
}

func (z zonesTblDo) Take() (*model.ZonesTbl, error) {
	if result, err := z.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ZonesTbl), nil
	}
}

func (z zonesTblDo) Last() (*model.ZonesTbl, error) {
	if result, err := z.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ZonesTbl), nil
	}
}

func (z zonesTblDo) Find() ([]*model.ZonesTbl, error) {
	result, err := z.DO.Find()
	return result.([]*model.ZonesTbl), err
}

func (z zonesTblDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ZonesTbl, err error) {
	buf := make([]*model.ZonesTbl, 0, batchSize)
	err = z.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (z zonesTblDo) FindInBatches(result *[]*model.ZonesTbl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return z.DO.FindInBatches(result, batchSize, fc)
}

func (z zonesTblDo) Attrs(attrs ...field.AssignExpr) *zonesTblDo {
	return z.withDO(z.DO.Attrs(attrs...))
}

func (z zonesTblDo) Assign(attrs ...field.AssignExpr) *zonesTblDo {
	return z.withDO(z.DO.Assign(attrs...))
}

func (z zonesTblDo) Joins(fields ...field.RelationField) *zonesTblDo {
	for _, _f := range fields {
		z = *z.withDO(z.DO.Joins(_f))
	}
	return &z
}

func (z zonesTblDo) Preload(fields ...field.RelationField) *zonesTblDo {
	for _, _f := range fields {
		z = *z.withDO(z.DO.Preload(_f))
	}
	return &z
}

func (z zonesTblDo) FirstOrInit() (*model.ZonesTbl, error) {
	if result, err := z.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ZonesTbl), nil
	}
}

func (z zonesTblDo) FirstOrCreate() (*model.ZonesTbl, error) {
	if result, err := z.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ZonesTbl), nil
	}
}

func (z zonesTblDo) FindByPage(offset int, limit int) (result []*model.ZonesTbl, count int64, err error) {
	result, err = z.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = z.Offset(-1).Limit(-1).Count()
	return
}

func (z zonesTblDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = z.Count()
	if err != nil {
		return
	}

	err = z.Offset(offset).Limit(limit).Scan(result)
	return
}

func (z zonesTblDo) Scan(result interface{}) (err error) {
	return z.DO.Scan(result)
}

func (z zonesTblDo) Delete(models ...*model.ZonesTbl) (result gen.ResultInfo, err error) {
	return z.DO.Delete(models)
}

func (z *zonesTblDo) withDO(do gen.Dao) *zonesTblDo {
	z.DO = *do.(*gen.DO)
	return z
}
