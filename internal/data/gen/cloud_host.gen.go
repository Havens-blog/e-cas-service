// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Havens-blog/e-cas-service/internal/data/model"
)

func newCloudHost(db *gorm.DB, opts ...gen.DOOption) cloudHost {
	_cloudHost := cloudHost{}

	_cloudHost.cloudHostDo.UseDB(db, opts...)
	_cloudHost.cloudHostDo.UseModel(&model.CloudHost{})

	tableName := _cloudHost.cloudHostDo.TableName()
	_cloudHost.ALL = field.NewAsterisk(tableName)
	_cloudHost.ID = field.NewInt64(tableName, "id")
	_cloudHost.ParentID = field.NewInt64(tableName, "parent_id")
	_cloudHost.HostPath = field.NewString(tableName, "host_path")
	_cloudHost.HostName = field.NewString(tableName, "host_name")
	_cloudHost.Sort = field.NewInt32(tableName, "sort")
	_cloudHost.Leader = field.NewString(tableName, "leader")
	_cloudHost.Phone = field.NewString(tableName, "phone")
	_cloudHost.Email = field.NewString(tableName, "email")
	_cloudHost.Status = field.NewInt32(tableName, "status")
	_cloudHost.CreateBy = field.NewString(tableName, "create_by")
	_cloudHost.UpdateBy = field.NewString(tableName, "update_by")
	_cloudHost.CreatedAt = field.NewTime(tableName, "created_at")
	_cloudHost.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cloudHost.DeletedAt = field.NewField(tableName, "deleted_at")

	_cloudHost.fillFieldMap()

	return _cloudHost
}

type cloudHost struct {
	cloudHostDo cloudHostDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键id
	ParentID  field.Int64  // 上级云资源
	HostPath  field.String // 云资源路径
	HostName  field.String // 云资源名称
	Sort      field.Int32  // 排序
	Leader    field.String // 负责人
	Phone     field.String // 手机
	Email     field.String // 邮箱
	Status    field.Int32  // 状态 1=正常 2-冻结
	CreateBy  field.String // 创建人
	UpdateBy  field.String // 修改人
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (c cloudHost) Table(newTableName string) *cloudHost {
	c.cloudHostDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cloudHost) As(alias string) *cloudHost {
	c.cloudHostDo.DO = *(c.cloudHostDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cloudHost) updateTableName(table string) *cloudHost {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.ParentID = field.NewInt64(table, "parent_id")
	c.HostPath = field.NewString(table, "host_path")
	c.HostName = field.NewString(table, "host_name")
	c.Sort = field.NewInt32(table, "sort")
	c.Leader = field.NewString(table, "leader")
	c.Phone = field.NewString(table, "phone")
	c.Email = field.NewString(table, "email")
	c.Status = field.NewInt32(table, "status")
	c.CreateBy = field.NewString(table, "create_by")
	c.UpdateBy = field.NewString(table, "update_by")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *cloudHost) WithContext(ctx context.Context) *cloudHostDo {
	return c.cloudHostDo.WithContext(ctx)
}

func (c cloudHost) TableName() string { return c.cloudHostDo.TableName() }

func (c cloudHost) Alias() string { return c.cloudHostDo.Alias() }

func (c *cloudHost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cloudHost) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 14)
	c.fieldMap["id"] = c.ID
	c.fieldMap["parent_id"] = c.ParentID
	c.fieldMap["host_path"] = c.HostPath
	c.fieldMap["host_name"] = c.HostName
	c.fieldMap["sort"] = c.Sort
	c.fieldMap["leader"] = c.Leader
	c.fieldMap["phone"] = c.Phone
	c.fieldMap["email"] = c.Email
	c.fieldMap["status"] = c.Status
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["update_by"] = c.UpdateBy
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c cloudHost) clone(db *gorm.DB) cloudHost {
	c.cloudHostDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cloudHost) replaceDB(db *gorm.DB) cloudHost {
	c.cloudHostDo.ReplaceDB(db)
	return c
}

type cloudHostDo struct{ gen.DO }

func (c cloudHostDo) Debug() *cloudHostDo {
	return c.withDO(c.DO.Debug())
}

func (c cloudHostDo) WithContext(ctx context.Context) *cloudHostDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cloudHostDo) ReadDB() *cloudHostDo {
	return c.Clauses(dbresolver.Read)
}

func (c cloudHostDo) WriteDB() *cloudHostDo {
	return c.Clauses(dbresolver.Write)
}

func (c cloudHostDo) Session(config *gorm.Session) *cloudHostDo {
	return c.withDO(c.DO.Session(config))
}

func (c cloudHostDo) Clauses(conds ...clause.Expression) *cloudHostDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cloudHostDo) Returning(value interface{}, columns ...string) *cloudHostDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cloudHostDo) Not(conds ...gen.Condition) *cloudHostDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cloudHostDo) Or(conds ...gen.Condition) *cloudHostDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cloudHostDo) Select(conds ...field.Expr) *cloudHostDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cloudHostDo) Where(conds ...gen.Condition) *cloudHostDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cloudHostDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *cloudHostDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c cloudHostDo) Order(conds ...field.Expr) *cloudHostDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cloudHostDo) Distinct(cols ...field.Expr) *cloudHostDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cloudHostDo) Omit(cols ...field.Expr) *cloudHostDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cloudHostDo) Join(table schema.Tabler, on ...field.Expr) *cloudHostDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cloudHostDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cloudHostDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cloudHostDo) RightJoin(table schema.Tabler, on ...field.Expr) *cloudHostDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cloudHostDo) Group(cols ...field.Expr) *cloudHostDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cloudHostDo) Having(conds ...gen.Condition) *cloudHostDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cloudHostDo) Limit(limit int) *cloudHostDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cloudHostDo) Offset(offset int) *cloudHostDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cloudHostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cloudHostDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cloudHostDo) Unscoped() *cloudHostDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cloudHostDo) Create(values ...*model.CloudHost) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cloudHostDo) CreateInBatches(values []*model.CloudHost, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cloudHostDo) Save(values ...*model.CloudHost) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cloudHostDo) First() (*model.CloudHost, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudHost), nil
	}
}

func (c cloudHostDo) Take() (*model.CloudHost, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudHost), nil
	}
}

func (c cloudHostDo) Last() (*model.CloudHost, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudHost), nil
	}
}

func (c cloudHostDo) Find() ([]*model.CloudHost, error) {
	result, err := c.DO.Find()
	return result.([]*model.CloudHost), err
}

func (c cloudHostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CloudHost, err error) {
	buf := make([]*model.CloudHost, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cloudHostDo) FindInBatches(result *[]*model.CloudHost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cloudHostDo) Attrs(attrs ...field.AssignExpr) *cloudHostDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cloudHostDo) Assign(attrs ...field.AssignExpr) *cloudHostDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cloudHostDo) Joins(fields ...field.RelationField) *cloudHostDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cloudHostDo) Preload(fields ...field.RelationField) *cloudHostDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cloudHostDo) FirstOrInit() (*model.CloudHost, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudHost), nil
	}
}

func (c cloudHostDo) FirstOrCreate() (*model.CloudHost, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudHost), nil
	}
}

func (c cloudHostDo) FindByPage(offset int, limit int) (result []*model.CloudHost, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cloudHostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cloudHostDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cloudHostDo) Delete(models ...*model.CloudHost) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cloudHostDo) withDO(do gen.Dao) *cloudHostDo {
	c.DO = *do.(*gen.DO)
	return c
}
